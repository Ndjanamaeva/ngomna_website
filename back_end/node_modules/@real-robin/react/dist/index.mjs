'use client';
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// #style-inject:#style-inject
function styleInject(css, { insertAt } = {}) {
  if (!css || typeof document === "undefined") return;
  const head = document.head || document.getElementsByTagName("head")[0];
  const style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

// src/styles.css
styleInject('.robin-root *,\n.robin-root ::before,\n.robin-root ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n.robin-root ::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n.robin-root *,\n.robin-root ::before,\n.robin-root ::after {\n  box-sizing: border-box;\n  border-width: 0;\n  border-style: solid;\n  border-color: #e5e7eb;\n}\n.robin-root ::before,\n.robin-root ::after {\n  --tw-content: "";\n}\n.robin-root html,\n.robin-root :host {\n  line-height: 1.5;\n  -webkit-text-size-adjust: 100%;\n  -moz-tab-size: 4;\n  -o-tab-size: 4;\n  tab-size: 4;\n  font-family:\n    var(--font-sans),\n    ui-sans-serif,\n    system-ui,\n    sans-serif,\n    "Apple Color Emoji",\n    "Segoe UI Emoji",\n    "Segoe UI Symbol",\n    "Noto Color Emoji";\n  font-feature-settings: normal;\n  font-variation-settings: normal;\n  -webkit-tap-highlight-color: transparent;\n}\n.robin-root body {\n  margin: 0;\n  line-height: inherit;\n}\n.robin-root hr {\n  height: 0;\n  color: inherit;\n  border-top-width: 1px;\n}\n.robin-root abbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n  text-decoration: underline dotted;\n}\n.robin-root h1,\n.robin-root h2,\n.robin-root h3,\n.robin-root h4,\n.robin-root h5,\n.robin-root h6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n.robin-root a {\n  color: inherit;\n  text-decoration: inherit;\n}\n.robin-root b,\n.robin-root strong {\n  font-weight: bolder;\n}\n.robin-root code,\n.robin-root kbd,\n.robin-root samp,\n.robin-root pre {\n  font-family:\n    ui-monospace,\n    SFMono-Regular,\n    Menlo,\n    Monaco,\n    Consolas,\n    "Liberation Mono",\n    "Courier New",\n    monospace;\n  font-feature-settings: normal;\n  font-variation-settings: normal;\n  font-size: 1em;\n}\n.robin-root small {\n  font-size: 80%;\n}\n.robin-root sub,\n.robin-root sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.robin-root sub {\n  bottom: -0.25em;\n}\n.robin-root sup {\n  top: -0.5em;\n}\n.robin-root table {\n  text-indent: 0;\n  border-color: inherit;\n  border-collapse: collapse;\n}\n.robin-root button,\n.robin-root input,\n.robin-root optgroup,\n.robin-root select,\n.robin-root textarea {\n  font-family: inherit;\n  font-feature-settings: inherit;\n  font-variation-settings: inherit;\n  font-size: 100%;\n  font-weight: inherit;\n  line-height: inherit;\n  letter-spacing: inherit;\n  color: inherit;\n  margin: 0;\n  padding: 0;\n}\n.robin-root button,\n.robin-root select {\n  text-transform: none;\n}\n.robin-root button,\n.robin-root input:where([type=button]),\n.robin-root input:where([type=reset]),\n.robin-root input:where([type=submit]) {\n  -webkit-appearance: button;\n  background-color: transparent;\n  background-image: none;\n}\n.robin-root :-moz-focusring {\n  outline: auto;\n}\n.robin-root :-moz-ui-invalid {\n  box-shadow: none;\n}\n.robin-root progress {\n  vertical-align: baseline;\n}\n.robin-root ::-webkit-inner-spin-button,\n.robin-root ::-webkit-outer-spin-button {\n  height: auto;\n}\n.robin-root [type=search] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n.robin-root ::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n.robin-root ::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n.robin-root summary {\n  display: list-item;\n}\n.robin-root blockquote,\n.robin-root dl,\n.robin-root dd,\n.robin-root h1,\n.robin-root h2,\n.robin-root h3,\n.robin-root h4,\n.robin-root h5,\n.robin-root h6,\n.robin-root hr,\n.robin-root figure,\n.robin-root p,\n.robin-root pre {\n  margin: 0;\n}\n.robin-root fieldset {\n  margin: 0;\n  padding: 0;\n}\n.robin-root legend {\n  padding: 0;\n}\n.robin-root ol,\n.robin-root ul,\n.robin-root menu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n.robin-root dialog {\n  padding: 0;\n}\n.robin-root textarea {\n  resize: vertical;\n}\n.robin-root input::-moz-placeholder,\n.robin-root textarea::-moz-placeholder {\n  opacity: 1;\n  color: #9ca3af;\n}\n.robin-root input::placeholder,\n.robin-root textarea::placeholder {\n  opacity: 1;\n  color: #9ca3af;\n}\n.robin-root button,\n.robin-root [role=button] {\n  cursor: pointer;\n}\n.robin-root :disabled {\n  cursor: default;\n}\n.robin-root img,\n.robin-root svg,\n.robin-root video,\n.robin-root canvas,\n.robin-root audio,\n.robin-root iframe,\n.robin-root embed,\n.robin-root object {\n  display: block;\n  vertical-align: middle;\n}\n.robin-root img,\n.robin-root video {\n  max-width: 100%;\n  height: auto;\n}\n.robin-root [hidden]:where(:not([hidden=until-found])) {\n  display: none;\n}\n.robin-root .robin-sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n.robin-root .robin-pointer-events-none {\n  pointer-events: none;\n}\n.robin-root .robin-fixed {\n  position: fixed;\n}\n.robin-root .robin-absolute {\n  position: absolute;\n}\n.robin-root .robin-relative {\n  position: relative;\n}\n.robin-root .robin-inset-0 {\n  inset: 0px;\n}\n.robin-root .robin-inset-x-0 {\n  left: 0px;\n  right: 0px;\n}\n.robin-root .robin--top-1 {\n  top: -0.25rem;\n}\n.robin-root .robin-bottom-0 {\n  bottom: 0px;\n}\n.robin-root .robin-bottom-1 {\n  bottom: 0.25rem;\n}\n.robin-root .robin-bottom-5 {\n  bottom: 1.25rem;\n}\n.robin-root .robin-bottom-6 {\n  bottom: 1.5rem;\n}\n.robin-root .robin-left-0 {\n  left: 0px;\n}\n.robin-root .robin-left-1 {\n  left: 0.25rem;\n}\n.robin-root .robin-left-1\\/2 {\n  left: 50%;\n}\n.robin-root .robin-left-2 {\n  left: 0.5rem;\n}\n.robin-root .robin-left-6 {\n  left: 1.5rem;\n}\n.robin-root .robin-right-2 {\n  right: 0.5rem;\n}\n.robin-root .robin-right-4 {\n  right: 1rem;\n}\n.robin-root .robin-right-5 {\n  right: 1.25rem;\n}\n.robin-root .robin-right-6 {\n  right: 1.5rem;\n}\n.robin-root .robin-top-1 {\n  top: 0.25rem;\n}\n.robin-root .robin-top-1\\/2 {\n  top: 50%;\n}\n.robin-root .robin-top-4 {\n  top: 1rem;\n}\n.robin-root .robin-top-6 {\n  top: 1.5rem;\n}\n.robin-root .robin-z-10 {\n  z-index: 10;\n}\n.robin-root .robin-z-50 {\n  z-index: 50;\n}\n.robin-root .robin--mx-1 {\n  margin-left: -0.25rem;\n  margin-right: -0.25rem;\n}\n.robin-root .robin-mx-4 {\n  margin-left: 1rem;\n  margin-right: 1rem;\n}\n.robin-root .robin-mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n.robin-root .robin-my-1 {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n}\n.robin-root .robin-my-6 {\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n.robin-root .-robin-ml-4 {\n  margin-left: -1rem;\n}\n.robin-root .robin-mb-1 {\n  margin-bottom: 0.25rem;\n}\n.robin-root .robin-mb-2 {\n  margin-bottom: 0.5rem;\n}\n.robin-root .robin-mb-4 {\n  margin-bottom: 1rem;\n}\n.robin-root .robin-ml-2 {\n  margin-left: 0.5rem;\n}\n.robin-root .robin-ml-6 {\n  margin-left: 1.5rem;\n}\n.robin-root .robin-ml-auto {\n  margin-left: auto;\n}\n.robin-root .robin-mr-2 {\n  margin-right: 0.5rem;\n}\n.robin-root .robin-mt-1 {\n  margin-top: 0.25rem;\n}\n.robin-root .robin-mt-2 {\n  margin-top: 0.5rem;\n}\n.robin-root .robin-mt-24 {\n  margin-top: 6rem;\n}\n.robin-root .robin-mt-4 {\n  margin-top: 1rem;\n}\n.robin-root .robin-mt-6 {\n  margin-top: 1.5rem;\n}\n.robin-root .robin-mt-auto {\n  margin-top: auto;\n}\n.robin-root .robin-block {\n  display: block;\n}\n.robin-root .robin-flex {\n  display: flex;\n}\n.robin-root .robin-inline-flex {\n  display: inline-flex;\n}\n.robin-root .robin-grid {\n  display: grid;\n}\n.robin-root .robin-hidden {\n  display: none;\n}\n.robin-root .robin-h-1 {\n  height: 0.25rem;\n}\n.robin-root .robin-h-1\\.5 {\n  height: 0.375rem;\n}\n.robin-root .robin-h-10 {\n  height: 2.5rem;\n}\n.robin-root .robin-h-2 {\n  height: 0.5rem;\n}\n.robin-root .robin-h-2\\.5 {\n  height: 0.625rem;\n}\n.robin-root .robin-h-20 {\n  height: 5rem;\n}\n.robin-root .robin-h-3 {\n  height: 0.75rem;\n}\n.robin-root .robin-h-3\\.5 {\n  height: 0.875rem;\n}\n.robin-root .robin-h-4 {\n  height: 1rem;\n}\n.robin-root .robin-h-5 {\n  height: 1.25rem;\n}\n.robin-root .robin-h-8 {\n  height: 2rem;\n}\n.robin-root .robin-h-9 {\n  height: 2.25rem;\n}\n.robin-root .robin-h-\\[30vh\\] {\n  height: 30vh;\n}\n.robin-root .robin-h-\\[var\\(--radix-select-trigger-height\\)\\] {\n  height: var(--radix-select-trigger-height);\n}\n.robin-root .robin-h-auto {\n  height: auto;\n}\n.robin-root .robin-h-full {\n  height: 100%;\n}\n.robin-root .robin-h-px {\n  height: 1px;\n}\n.robin-root .robin-max-h-\\[--radix-select-content-available-height\\] {\n  max-height: var(--radix-select-content-available-height);\n}\n.robin-root .robin-max-h-\\[300px\\] {\n  max-height: 300px;\n}\n.robin-root .robin-max-h-\\[var\\(--radix-dropdown-menu-content-available-height\\)\\] {\n  max-height: var(--radix-dropdown-menu-content-available-height);\n}\n.robin-root .robin-min-h-12 {\n  min-height: 3rem;\n}\n.robin-root .robin-min-h-\\[60px\\] {\n  min-height: 60px;\n}\n.robin-root .\\!robin-w-9 {\n  width: 2.25rem !important;\n}\n.robin-root .robin-w-1 {\n  width: 0.25rem;\n}\n.robin-root .robin-w-2 {\n  width: 0.5rem;\n}\n.robin-root .robin-w-2\\.5 {\n  width: 0.625rem;\n}\n.robin-root .robin-w-3 {\n  width: 0.75rem;\n}\n.robin-root .robin-w-3\\.5 {\n  width: 0.875rem;\n}\n.robin-root .robin-w-4 {\n  width: 1rem;\n}\n.robin-root .robin-w-5 {\n  width: 1.25rem;\n}\n.robin-root .robin-w-72 {\n  width: 18rem;\n}\n.robin-root .robin-w-9 {\n  width: 2.25rem;\n}\n.robin-root .robin-w-96 {\n  width: 24rem;\n}\n.robin-root .robin-w-\\[100px\\] {\n  width: 100px;\n}\n.robin-root .robin-w-full {\n  width: 100%;\n}\n.robin-root .robin-min-w-10 {\n  min-width: 2.5rem;\n}\n.robin-root .robin-min-w-8 {\n  min-width: 2rem;\n}\n.robin-root .robin-min-w-9 {\n  min-width: 2.25rem;\n}\n.robin-root .robin-min-w-\\[8rem\\] {\n  min-width: 8rem;\n}\n.robin-root .robin-min-w-\\[var\\(--radix-select-trigger-width\\)\\] {\n  min-width: var(--radix-select-trigger-width);\n}\n.robin-root .robin-flex-1 {\n  flex: 1 1 0%;\n}\n.robin-root .robin-flex-shrink-0 {\n  flex-shrink: 0;\n}\n.robin-root .robin-flex-grow {\n  flex-grow: 1;\n}\n.robin-root .robin-grow {\n  flex-grow: 1;\n}\n.robin-root .robin-origin-\\[--radix-dropdown-menu-content-transform-origin\\] {\n  transform-origin: var(--radix-dropdown-menu-content-transform-origin);\n}\n.robin-root .robin-origin-\\[--radix-popover-content-transform-origin\\] {\n  transform-origin: var(--radix-popover-content-transform-origin);\n}\n.robin-root .robin-origin-\\[--radix-select-content-transform-origin\\] {\n  transform-origin: var(--radix-select-content-transform-origin);\n}\n.robin-root .robin--translate-x-1\\/2 {\n  --tw-translate-x: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.robin-root .robin--translate-y-1\\/2 {\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.robin-root .robin-cursor-default {\n  cursor: default;\n}\n.robin-root .robin-cursor-pointer {\n  cursor: pointer;\n}\n.robin-root .robin-touch-none {\n  touch-action: none;\n}\n.robin-root .robin-select-none {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n}\n.robin-root .robin-resize-none {\n  resize: none;\n}\n.robin-root .robin-scroll-m-20 {\n  scroll-margin: 5rem;\n}\n.robin-root .robin-list-disc {\n  list-style-type: disc;\n}\n.robin-root .robin-grid-cols-2 {\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n.robin-root .robin-flex-row {\n  flex-direction: row;\n}\n.robin-root .robin-flex-col {\n  flex-direction: column;\n}\n.robin-root .robin-flex-wrap {\n  flex-wrap: wrap;\n}\n.robin-root .robin-items-center {\n  align-items: center;\n}\n.robin-root .\\!robin-justify-start {\n  justify-content: flex-start !important;\n}\n.robin-root .robin-justify-end {\n  justify-content: flex-end;\n}\n.robin-root .\\!robin-justify-center {\n  justify-content: center !important;\n}\n.robin-root .robin-justify-center {\n  justify-content: center;\n}\n.robin-root .robin-justify-between {\n  justify-content: space-between;\n}\n.robin-root .robin-gap-1 {\n  gap: 0.25rem;\n}\n.robin-root .robin-gap-1\\.5 {\n  gap: 0.375rem;\n}\n.robin-root .robin-gap-2 {\n  gap: 0.5rem;\n}\n.robin-root .robin-gap-4 {\n  gap: 1rem;\n}\n.robin-root .robin-space-y-1\\.5 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.375rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.375rem * var(--tw-space-y-reverse));\n}\n.robin-root .robin-space-y-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1rem * var(--tw-space-y-reverse));\n}\n.robin-root .robin-divide-y > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-y-reverse: 0;\n  border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n  border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n}\n.robin-root .robin-divide-border > :not([hidden]) ~ :not([hidden]) {\n  border-color: hsl(var(--border));\n}\n.robin-root .robin-overflow-hidden {\n  overflow: hidden;\n}\n.robin-root .robin-overflow-y-auto {\n  overflow-y: auto;\n}\n.robin-root .robin-overflow-x-hidden {\n  overflow-x: hidden;\n}\n.robin-root .robin-truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.robin-root .robin-whitespace-nowrap {\n  white-space: nowrap;\n}\n.robin-root .robin-break-words {\n  overflow-wrap: break-word;\n}\n.robin-root .\\!robin-rounded-full {\n  border-radius: 9999px !important;\n}\n.robin-root .robin-rounded-\\[2px\\] {\n  border-radius: 2px;\n}\n.robin-root .robin-rounded-\\[31\\%\\] {\n  border-radius: 31%;\n}\n.robin-root .robin-rounded-\\[inherit\\] {\n  border-radius: inherit;\n}\n.robin-root .robin-rounded-full {\n  border-radius: 9999px;\n}\n.robin-root .robin-rounded-lg {\n  border-radius: var(--radius);\n}\n.robin-root .robin-rounded-md {\n  border-radius: calc(var(--radius) - 2px);\n}\n.robin-root .robin-rounded-sm {\n  border-radius: calc(var(--radius) - 4px);\n}\n.robin-root .robin-rounded-xl {\n  border-radius: 0.75rem;\n}\n.robin-root .robin-rounded-t-\\[10px\\] {\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n.robin-root .\\!robin-border-0 {\n  border-width: 0px !important;\n}\n.robin-root .robin-border {\n  border-width: 1px;\n}\n.robin-root .robin-border-0 {\n  border-width: 0px;\n}\n.robin-root .robin-border-b {\n  border-bottom-width: 1px;\n}\n.robin-root .robin-border-l {\n  border-left-width: 1px;\n}\n.robin-root .robin-border-l-2 {\n  border-left-width: 2px;\n}\n.robin-root .robin-border-t {\n  border-top-width: 1px;\n}\n.robin-root .robin-border-dashed {\n  border-style: dashed;\n}\n.robin-root .robin-border-none {\n  border-style: none;\n}\n.robin-root .robin-border-\\[\\#99c2ff\\]\\/50 {\n  border-color: rgb(153 194 255 / 0.5);\n}\n.robin-root .robin-border-\\[\\#e6c000\\]\\/50 {\n  border-color: rgb(230 192 0 / 0.5);\n}\n.robin-root .robin-border-border {\n  border-color: hsl(var(--border));\n}\n.robin-root .robin-border-gray-200 {\n  --tw-border-opacity: 1;\n  border-color: rgb(229 231 235 / var(--tw-border-opacity, 1));\n}\n.robin-root .robin-border-input {\n  border-color: hsl(var(--input));\n}\n.robin-root .robin-border-primary\\/50 {\n  border-color: hsl(var(--primary) / 0.5);\n}\n.robin-root .robin-border-transparent {\n  border-color: transparent;\n}\n.robin-root .robin-border-l-transparent {\n  border-left-color: transparent;\n}\n.robin-root .robin-border-t-transparent {\n  border-top-color: transparent;\n}\n.robin-root .\\!robin-bg-transparent {\n  background-color: transparent !important;\n}\n.robin-root .robin-bg-\\[\\#888\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(136 136 136 / var(--tw-bg-opacity, 1));\n}\n.robin-root .robin-bg-\\[\\#e8f2ff\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(232 242 255 / var(--tw-bg-opacity, 1));\n}\n.robin-root .robin-bg-\\[\\#f3f0ff\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 240 255 / var(--tw-bg-opacity, 1));\n}\n.robin-root .robin-bg-\\[\\#fffbe6\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 251 230 / var(--tw-bg-opacity, 1));\n}\n.robin-root .robin-bg-background {\n  background-color: hsl(var(--background));\n}\n.robin-root .robin-bg-border {\n  background-color: hsl(var(--border));\n}\n.robin-root .robin-bg-card {\n  background-color: hsl(var(--card));\n}\n.robin-root .robin-bg-destructive {\n  background-color: hsl(var(--destructive));\n}\n.robin-root .robin-bg-gray-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));\n}\n.robin-root .robin-bg-muted {\n  background-color: hsl(var(--muted));\n}\n.robin-root .robin-bg-popover {\n  background-color: hsl(var(--popover));\n}\n.robin-root .robin-bg-primary {\n  background-color: hsl(var(--primary));\n}\n.robin-root .robin-bg-primary\\/20 {\n  background-color: hsl(var(--primary) / 0.2);\n}\n.robin-root .robin-bg-red-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 242 242 / var(--tw-bg-opacity, 1));\n}\n.robin-root .robin-bg-secondary {\n  background-color: hsl(var(--secondary));\n}\n.robin-root .robin-bg-transparent {\n  background-color: transparent;\n}\n.robin-root .robin-bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n}\n.robin-root .robin-fill-current {\n  fill: currentColor;\n}\n.robin-root .\\!robin-p-0 {\n  padding: 0px !important;\n}\n.robin-root .robin-p-1 {\n  padding: 0.25rem;\n}\n.robin-root .robin-p-12 {\n  padding: 3rem;\n}\n.robin-root .robin-p-2 {\n  padding: 0.5rem;\n}\n.robin-root .robin-p-3 {\n  padding: 0.75rem;\n}\n.robin-root .robin-p-4 {\n  padding: 1rem;\n}\n.robin-root .robin-p-6 {\n  padding: 1.5rem;\n}\n.robin-root .robin-p-\\[1px\\] {\n  padding: 1px;\n}\n.robin-root .\\!robin-px-2 {\n  padding-left: 0.5rem !important;\n  padding-right: 0.5rem !important;\n}\n.robin-root .robin-px-1 {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n.robin-root .robin-px-1\\.5 {\n  padding-left: 0.375rem;\n  padding-right: 0.375rem;\n}\n.robin-root .robin-px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n.robin-root .robin-px-2\\.5 {\n  padding-left: 0.625rem;\n  padding-right: 0.625rem;\n}\n.robin-root .robin-px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n.robin-root .robin-px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.robin-root .robin-px-8 {\n  padding-left: 2rem;\n  padding-right: 2rem;\n}\n.robin-root .robin-py-0\\.5 {\n  padding-top: 0.125rem;\n  padding-bottom: 0.125rem;\n}\n.robin-root .robin-py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n.robin-root .robin-py-1\\.5 {\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n}\n.robin-root .robin-py-10 {\n  padding-top: 2.5rem;\n  padding-bottom: 2.5rem;\n}\n.robin-root .robin-py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.robin-root .robin-pb-2 {\n  padding-bottom: 0.5rem;\n}\n.robin-root .robin-pl-1 {\n  padding-left: 0.25rem;\n}\n.robin-root .robin-pl-2 {\n  padding-left: 0.5rem;\n}\n.robin-root .robin-pl-3 {\n  padding-left: 0.75rem;\n}\n.robin-root .robin-pl-6 {\n  padding-left: 1.5rem;\n}\n.robin-root .robin-pl-8 {\n  padding-left: 2rem;\n}\n.robin-root .robin-pr-2 {\n  padding-right: 0.5rem;\n}\n.robin-root .robin-pr-4 {\n  padding-right: 1rem;\n}\n.robin-root .robin-pr-8 {\n  padding-right: 2rem;\n}\n.robin-root .robin-pt-0 {\n  padding-top: 0px;\n}\n.robin-root .robin-pt-1 {\n  padding-top: 0.25rem;\n}\n.robin-root .robin-text-center {\n  text-align: center;\n}\n.robin-root .robin-font-mono {\n  font-family:\n    ui-monospace,\n    SFMono-Regular,\n    Menlo,\n    Monaco,\n    Consolas,\n    "Liberation Mono",\n    "Courier New",\n    monospace;\n}\n.robin-root .robin-text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n.robin-root .robin-text-3xl {\n  font-size: 1.875rem;\n  line-height: 2.25rem;\n}\n.robin-root .robin-text-4xl {\n  font-size: 2.25rem;\n  line-height: 2.5rem;\n}\n.robin-root .robin-text-\\[10px\\] {\n  font-size: 10px;\n}\n.robin-root .robin-text-\\[11px\\] {\n  font-size: 11px;\n}\n.robin-root .robin-text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n.robin-root .robin-text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n.robin-root .robin-text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.robin-root .robin-text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n.robin-root .robin-text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.robin-root .robin-font-extrabold {\n  font-weight: 800;\n}\n.robin-root .robin-font-medium {\n  font-weight: 500;\n}\n.robin-root .robin-font-normal {\n  font-weight: 400;\n}\n.robin-root .robin-font-semibold {\n  font-weight: 600;\n}\n.robin-root .robin-italic {\n  font-style: italic;\n}\n.robin-root .robin-leading-6 {\n  line-height: 1.5rem;\n}\n.robin-root .robin-leading-7 {\n  line-height: 1.75rem;\n}\n.robin-root .robin-leading-none {\n  line-height: 1;\n}\n.robin-root .robin-tracking-tight {\n  letter-spacing: -0.025em;\n}\n.robin-root .robin-tracking-widest {\n  letter-spacing: 0.1em;\n}\n.robin-root .robin-text-\\[\\#333\\] {\n  --tw-text-opacity: 1;\n  color: rgb(51 51 51 / var(--tw-text-opacity, 1));\n}\n.robin-root .robin-text-black {\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity, 1));\n}\n.robin-root .robin-text-card-foreground {\n  color: hsl(var(--card-foreground));\n}\n.robin-root .robin-text-destructive-foreground {\n  color: hsl(var(--destructive-foreground));\n}\n.robin-root .robin-text-foreground {\n  color: hsl(var(--foreground));\n}\n.robin-root .robin-text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity, 1));\n}\n.robin-root .robin-text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity, 1));\n}\n.robin-root .robin-text-muted-foreground {\n  color: hsl(var(--muted-foreground));\n}\n.robin-root .robin-text-popover-foreground {\n  color: hsl(var(--popover-foreground));\n}\n.robin-root .robin-text-primary {\n  color: hsl(var(--primary));\n}\n.robin-root .robin-text-primary-foreground {\n  color: hsl(var(--primary-foreground));\n}\n.robin-root .robin-text-red-500 {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity, 1));\n}\n.robin-root .robin-text-secondary-foreground {\n  color: hsl(var(--secondary-foreground));\n}\n.robin-root .robin-text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n}\n.robin-root .robin-underline-offset-4 {\n  text-underline-offset: 4px;\n}\n.robin-root .robin-opacity-50 {\n  opacity: 0.5;\n}\n.robin-root .robin-opacity-60 {\n  opacity: 0.6;\n}\n.robin-root .\\!robin-shadow-none {\n  --tw-shadow: 0 0 #0000 !important;\n  --tw-shadow-colored: 0 0 #0000 !important;\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow) !important;\n}\n.robin-root .robin-shadow {\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.robin-root .robin-shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.robin-root .robin-shadow-md {\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.robin-root .robin-shadow-sm {\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.robin-root .robin-outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.robin-root .robin-ring-2 {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.robin-root .robin-ring-offset-2 {\n  --tw-ring-offset-width: 2px;\n}\n.robin-root .robin-ring-offset-background {\n  --tw-ring-offset-color: hsl(var(--background));\n}\n.robin-root .robin-transition-all {\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.robin-root .robin-transition-colors {\n  transition-property:\n    color,\n    background-color,\n    border-color,\n    text-decoration-color,\n    fill,\n    stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n@keyframes enter {\n  from {\n    opacity: var(--tw-enter-opacity, 1);\n    transform: translate3d(var(--tw-enter-translate-x, 0), var(--tw-enter-translate-y, 0), 0) scale3d(var(--tw-enter-scale, 1), var(--tw-enter-scale, 1), var(--tw-enter-scale, 1)) rotate(var(--tw-enter-rotate, 0));\n  }\n}\n@keyframes exit {\n  to {\n    opacity: var(--tw-exit-opacity, 1);\n    transform: translate3d(var(--tw-exit-translate-x, 0), var(--tw-exit-translate-y, 0), 0) scale3d(var(--tw-exit-scale, 1), var(--tw-exit-scale, 1), var(--tw-exit-scale, 1)) rotate(var(--tw-exit-rotate, 0));\n  }\n}\n.robin-root .\\[appearance\\:textfield\\] {\n  -webkit-appearance: textfield;\n  -moz-appearance: textfield;\n  appearance: textfield;\n}\n.robin-root {\n  --background: 0 0% 100%;\n  --foreground: 240 10% 3.9%;\n  --card: 0 0% 100%;\n  --card-foreground: 240 10% 3.9%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 240 10% 3.9%;\n  --primary: 240 5.9% 10%;\n  --primary-foreground: 0 0% 98%;\n  --secondary: 240 4.8% 95.9%;\n  --secondary-foreground: 240 5.9% 10%;\n  --muted: 240 4.8% 95.9%;\n  --muted-foreground: 240 3.8% 46.1%;\n  --accent: 240 4.8% 95.9%;\n  --accent-foreground: 240 5.9% 10%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 0 0% 98%;\n  --border: 240 5.9% 90%;\n  --input: 240 5.9% 90%;\n  --ring: 240 5.9% 10%;\n  --radius: 0.3rem;\n  --chart-1: 12 76% 61%;\n  --chart-2: 173 58% 39%;\n  --chart-3: 197 37% 24%;\n  --chart-4: 43 74% 66%;\n  --chart-5: 27 87% 67%;\n}\n.robin-root.dark {\n  --background: 240 10% 3.9%;\n  --foreground: 0 0% 98%;\n  --card: 240 10% 3.9%;\n  --card-foreground: 0 0% 98%;\n  --popover: 240 10% 3.9%;\n  --popover-foreground: 0 0% 98%;\n  --primary: 0 0% 98%;\n  --primary-foreground: 240 5.9% 10%;\n  --secondary: 240 3.7% 15.9%;\n  --secondary-foreground: 0 0% 98%;\n  --muted: 240 3.7% 15.9%;\n  --muted-foreground: 240 5% 64.9%;\n  --accent: 240 3.7% 15.9%;\n  --accent-foreground: 0 0% 98%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 0% 98%;\n  --border: 240 3.7% 15.9%;\n  --input: 240 3.7% 15.9%;\n  --ring: 240 4.9% 83.9%;\n  --chart-1: 220 70% 50%;\n  --chart-2: 160 60% 45%;\n  --chart-3: 30 80% 55%;\n  --chart-4: 280 65% 60%;\n  --chart-5: 340 75% 55%;\n}\n.robin-root * {\n  border-color: hsl(var(--border));\n}\n.robin-root {\n  background-color: hsl(var(--background));\n  color: hsl(var(--foreground));\n  font-feature-settings: "rlig" 1, "calt" 1;\n}\n.robin-root .robin-popover-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1rem;\n}\n.robin-root .robin-popover-header {\n  background-image:\n    linear-gradient(\n      to right,\n      #3b82f6,\n      #9333ea);\n}\n.robin-root .robin-editor-panel-container {\n  container-type: inline-size;\n  container-name: robin-editor-panel-container;\n}\n@container robin-editor-panel-container (min-width: 640px) {\n  .robin-root .robin-editor-panel-grid {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n@container robin-editor-panel-container (min-width: 1024px) {\n  .robin-root .robin-editor-panel-grid {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n@container robin-editor-panel-container (min-width: 1024px) {\n  .robin-root .robin-editor-panel-grid {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n@container robin-editor-panel-container (min-width: 1280px) {\n  .robin-root .robin-editor-panel-grid {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n}\n@container robin-editor-panel-container (min-width: 640px) {\n  .robin-root .robin-comment-input-container {\n    grid-column: span 2;\n  }\n}\n@container robin-editor-panel-container (min-width: 1024px) {\n  .robin-root .robin-comment-input-container {\n    grid-column: span 1;\n  }\n}\n@container robin-editor-panel-container (min-width: 1280px) {\n  .robin-root .robin-typography-container {\n    grid-column: span 2;\n  }\n}\n.robin-root .robin-typography-container {\n  container-type: inline-size;\n  container-name: robin-typography-container;\n}\n@container robin-typography-container (min-width: 320px) {\n  .robin-root .robin-typography-grid {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n@keyframes robin-fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n.robin-root .robin-animate-fadeIn {\n  animation: robin-fadeIn 0.3s ease-in-out;\n}\n@keyframes robin-numberChange {\n  0% {\n    transform: translateY(-100%);\n    opacity: 0;\n  }\n  100% {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n.robin-root .robin-animate-number {\n  display: inline-block;\n  animation: robin-numberChange 0.3s ease-out;\n}\n.file\\:robin-border-0::file-selector-button {\n  border-width: 0px;\n}\n.file\\:robin-bg-transparent::file-selector-button {\n  background-color: transparent;\n}\n.file\\:robin-text-sm::file-selector-button {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.file\\:robin-font-medium::file-selector-button {\n  font-weight: 500;\n}\n.file\\:robin-text-foreground::file-selector-button {\n  color: hsl(var(--foreground));\n}\n.placeholder\\:robin-text-muted-foreground::-moz-placeholder {\n  color: hsl(var(--muted-foreground));\n}\n.placeholder\\:robin-text-muted-foreground::placeholder {\n  color: hsl(var(--muted-foreground));\n}\n.hover\\:robin-bg-accent:hover {\n  background-color: hsl(var(--accent));\n}\n.hover\\:robin-bg-black\\/5:hover {\n  background-color: rgb(0 0 0 / 0.05);\n}\n.hover\\:robin-bg-destructive\\/80:hover {\n  background-color: hsl(var(--destructive) / 0.8);\n}\n.hover\\:robin-bg-destructive\\/90:hover {\n  background-color: hsl(var(--destructive) / 0.9);\n}\n.hover\\:robin-bg-muted:hover {\n  background-color: hsl(var(--muted));\n}\n.hover\\:robin-bg-primary\\/80:hover {\n  background-color: hsl(var(--primary) / 0.8);\n}\n.hover\\:robin-bg-primary\\/90:hover {\n  background-color: hsl(var(--primary) / 0.9);\n}\n.hover\\:robin-bg-secondary\\/80:hover {\n  background-color: hsl(var(--secondary) / 0.8);\n}\n.hover\\:robin-text-accent-foreground:hover {\n  color: hsl(var(--accent-foreground));\n}\n.hover\\:robin-text-foreground:hover {\n  color: hsl(var(--foreground));\n}\n.hover\\:robin-text-muted-foreground:hover {\n  color: hsl(var(--muted-foreground));\n}\n.hover\\:robin-underline:hover {\n  text-decoration-line: underline;\n}\n.focus\\:robin-border-blue-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(59 130 246 / var(--tw-border-opacity, 1));\n}\n.focus\\:robin-bg-accent:focus {\n  background-color: hsl(var(--accent));\n}\n.focus\\:robin-text-accent-foreground:focus {\n  color: hsl(var(--accent-foreground));\n}\n.focus\\:robin-outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.focus\\:\\!robin-ring-0:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color) !important;\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color) !important;\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000) !important;\n}\n.focus\\:robin-ring-1:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.focus\\:robin-ring-2:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.focus\\:robin-ring-black\\/20:focus {\n  --tw-ring-color: rgb(0 0 0 / 0.2);\n}\n.focus\\:robin-ring-blue-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1));\n}\n.focus\\:robin-ring-ring:focus {\n  --tw-ring-color: hsl(var(--ring));\n}\n.focus\\:robin-ring-offset-2:focus {\n  --tw-ring-offset-width: 2px;\n}\n.focus-visible\\:robin-outline-none:focus-visible {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.focus-visible\\:robin-ring-1:focus-visible {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.focus-visible\\:robin-ring-2:focus-visible {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n}\n.focus-visible\\:robin-ring-ring:focus-visible {\n  --tw-ring-color: hsl(var(--ring));\n}\n.focus-visible\\:robin-ring-offset-2:focus-visible {\n  --tw-ring-offset-width: 2px;\n}\n.disabled\\:robin-pointer-events-none:disabled {\n  pointer-events: none;\n}\n.disabled\\:robin-cursor-not-allowed:disabled {\n  cursor: not-allowed;\n}\n.disabled\\:robin-opacity-50:disabled {\n  opacity: 0.5;\n}\n.robin-peer:disabled ~ .peer-disabled\\:robin-cursor-not-allowed {\n  cursor: not-allowed;\n}\n.robin-peer:disabled ~ .peer-disabled\\:robin-opacity-70 {\n  opacity: 0.7;\n}\n.data-\\[disabled\\]\\:robin-pointer-events-none[data-disabled] {\n  pointer-events: none;\n}\n.data-\\[side\\=bottom\\]\\:robin-translate-y-1[data-side=bottom] {\n  --tw-translate-y: 0.25rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.data-\\[side\\=left\\]\\:robin--translate-x-1[data-side=left] {\n  --tw-translate-x: -0.25rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.data-\\[side\\=right\\]\\:robin-translate-x-1[data-side=right] {\n  --tw-translate-x: 0.25rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.data-\\[side\\=top\\]\\:robin--translate-y-1[data-side=top] {\n  --tw-translate-y: -0.25rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.data-\\[state\\=active\\]\\:robin-bg-background[data-state=active] {\n  background-color: hsl(var(--background));\n}\n.data-\\[state\\=on\\]\\:robin-bg-accent[data-state=on] {\n  background-color: hsl(var(--accent));\n}\n.data-\\[state\\=open\\]\\:robin-bg-accent[data-state=open] {\n  background-color: hsl(var(--accent));\n}\n.data-\\[placeholder\\]\\:robin-text-muted-foreground[data-placeholder] {\n  color: hsl(var(--muted-foreground));\n}\n.data-\\[state\\=active\\]\\:robin-text-foreground[data-state=active] {\n  color: hsl(var(--foreground));\n}\n.data-\\[state\\=on\\]\\:robin-text-accent-foreground[data-state=on] {\n  color: hsl(var(--accent-foreground));\n}\n.data-\\[disabled\\]\\:robin-opacity-50[data-disabled] {\n  opacity: 0.5;\n}\n.data-\\[state\\=active\\]\\:robin-shadow[data-state=active] {\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.data-\\[state\\=open\\]\\:robin-animate-in[data-state=open] {\n  animation-name: enter;\n  animation-duration: 150ms;\n  --tw-enter-opacity: initial;\n  --tw-enter-scale: initial;\n  --tw-enter-rotate: initial;\n  --tw-enter-translate-x: initial;\n  --tw-enter-translate-y: initial;\n}\n.data-\\[state\\=closed\\]\\:robin-animate-out[data-state=closed] {\n  animation-name: exit;\n  animation-duration: 150ms;\n  --tw-exit-opacity: initial;\n  --tw-exit-scale: initial;\n  --tw-exit-rotate: initial;\n  --tw-exit-translate-x: initial;\n  --tw-exit-translate-y: initial;\n}\n.data-\\[state\\=closed\\]\\:robin-fade-out-0[data-state=closed] {\n  --tw-exit-opacity: 0;\n}\n.data-\\[state\\=open\\]\\:robin-fade-in-0[data-state=open] {\n  --tw-enter-opacity: 0;\n}\n.data-\\[state\\=closed\\]\\:robin-zoom-out-95[data-state=closed] {\n  --tw-exit-scale: .95;\n}\n.data-\\[state\\=open\\]\\:robin-zoom-in-95[data-state=open] {\n  --tw-enter-scale: .95;\n}\n.data-\\[side\\=bottom\\]\\:robin-slide-in-from-top-2[data-side=bottom] {\n  --tw-enter-translate-y: -0.5rem;\n}\n.data-\\[side\\=left\\]\\:robin-slide-in-from-right-2[data-side=left] {\n  --tw-enter-translate-x: 0.5rem;\n}\n.data-\\[side\\=right\\]\\:robin-slide-in-from-left-2[data-side=right] {\n  --tw-enter-translate-x: -0.5rem;\n}\n.data-\\[side\\=top\\]\\:robin-slide-in-from-bottom-2[data-side=top] {\n  --tw-enter-translate-y: 0.5rem;\n}\n@media (min-width: 640px) {\n  .sm\\:robin-gap-2\\.5 {\n    gap: 0.625rem;\n  }\n  .sm\\:robin-text-left {\n    text-align: left;\n  }\n}\n@media (min-width: 768px) {\n  .md\\:robin-text-sm {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n}\n.\\[\\&\\:\\:-webkit-inner-spin-button\\]\\:robin-appearance-none::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  appearance: none;\n}\n.\\[\\&\\:\\:-webkit-outer-spin-button\\]\\:robin-appearance-none::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  appearance: none;\n}\n.\\[\\&\\>span\\]\\:robin-line-clamp-1 > span {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n}\n.\\[\\&\\>svg\\]\\:robin-size-4 > svg {\n  width: 1rem;\n  height: 1rem;\n}\n.\\[\\&\\>svg\\]\\:robin-h-3\\.5 > svg {\n  height: 0.875rem;\n}\n.\\[\\&\\>svg\\]\\:robin-w-3\\.5 > svg {\n  width: 0.875rem;\n}\n.\\[\\&\\>svg\\]\\:robin-shrink-0 > svg {\n  flex-shrink: 0;\n}\n.\\[\\&_svg\\]\\:robin-pointer-events-none svg {\n  pointer-events: none;\n}\n.\\[\\&_svg\\]\\:robin-size-4 svg {\n  width: 1rem;\n  height: 1rem;\n}\n.\\[\\&_svg\\]\\:robin-shrink-0 svg {\n  flex-shrink: 0;\n}\n');

// src/robin.tsx
import { useState as useState4 } from "react";

// src/robin-context.tsx
import { createContext, useContext } from "react";
var RobinContext = createContext({
  apiKey: "",
  robinURL: "",
  extraHeaders: {}
});
var useRobinContext = () => {
  const value = useContext(RobinContext);
  if (!value) {
    throw new Error("RobinContext not found");
  }
  return value;
};

// src/robin.tsx
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

// src/components/page-drawer.tsx
import { useState as useState2 } from "react";
import {
  ChevronLeft,
  GitPullRequestArrow,
  MousePointerClick
} from "lucide-react";

// src/hooks/use-health.ts
import { useQuery } from "@tanstack/react-query";
import ky from "ky";
var useHealth = () => {
  const { robinURL, apiKey, extraHeaders } = useRobinContext();
  return useQuery({
    queryKey: ["health"],
    queryFn: () => __async(void 0, null, function* () {
      return ky.get(`${robinURL}/api/health`, {
        headers: __spreadValues({
          Authorization: `Bearer ${apiKey}`
        }, extraHeaders)
      }).json();
    })
  });
};

// src/hooks/use-feedback.ts
import { useMutation, useQuery as useQuery2, useQueryClient } from "@tanstack/react-query";
import { snapshot } from "rrweb-snapshot";

// src/lib/device-information.ts
function getUserAgentData() {
  if ("userAgentData" in navigator && navigator.userAgentData && typeof navigator.userAgentData === "object" && "brands" in navigator.userAgentData && "mobile" in navigator.userAgentData && "platform" in navigator.userAgentData) {
    return navigator.userAgentData;
  }
  return null;
}
var BROWSER_PATTERNS = [
  {
    name: "Instagram in-app browser",
    regex: /Instagram ([0-9.]+)/,
    validate: (ua) => ua.includes("Instagram")
  },
  {
    name: "Facebook in-app browser",
    regex: /FBAV\/([0-9.]+)/,
    validate: (ua) => ua.includes("FBAV") || ua.includes("FBAN"),
    getVersion: (match) => match[1] || "unknown"
  },
  {
    name: "Electron",
    regex: /Electron\/([0-9.]+)/,
    properties: {
      is_electron: true
    }
  },
  // Edge must be before Chrome because Edge includes Chrome in UA
  {
    name: "Edge",
    regex: /Edg(e)?\/([0-9.]+)/,
    properties: {
      engine: "EdgeHTML"
    }
  },
  // Opera must be before Chrome because Opera includes Chrome in UA
  {
    name: "Opera",
    regex: /OPR\/([0-9.]+)|Opera\/([0-9.]+)/,
    getVersion: (match) => match[1] || match[2] || "unknown"
  },
  // Chrome must be before Safari because Chrome also includes Safari in UA
  {
    name: "Chrome",
    regex: /Chrome\/([0-9.]+)/,
    properties: {
      engine: "WebKit"
    },
    validate: (ua) => !ua.includes("Edg/") && !ua.includes("OPR/")
  },
  {
    name: "Chrome iOS",
    regex: /CriOS\/([0-9.]+)/,
    properties: {
      engine: "WebKit"
    }
  },
  {
    name: "Firefox iOS",
    regex: /FxiOS\/([0-9.]+)/,
    properties: {
      engine: "Gecko"
    }
  },
  {
    name: "Firefox",
    regex: /Firefox\/([0-9.]+)/,
    properties: {
      engine: "Gecko"
    }
  },
  {
    name: "Safari",
    regex: /Version\/([0-9.]+).*Safari/,
    properties: {
      engine: "WebKit"
    }
  },
  {
    name: "Samsung Internet",
    regex: /SamsungBrowser\/([0-9.]+)/,
    properties: {
      engine: "WebKit"
    }
  },
  {
    name: "IE",
    regex: /Trident\/.*rv:([0-9.]+)|MSIE ([0-9.]+)/,
    properties: {
      engine: "Trident"
    },
    getVersion: (match) => match[1] || match[2] || "unknown"
  },
  {
    name: "Brave",
    regex: /Brave\/([0-9.]+)/,
    properties: {
      engine: "WebKit"
    }
  },
  {
    name: "UCBrowser",
    regex: /UCBrowser\/([0-9.]+)/
  },
  {
    name: "Yandex",
    regex: /YaBrowser\/([0-9.]+)/
  }
];
var WEBVIEW_PATTERNS = [
  {
    name: "iOS WebView",
    validate: (ua) => (ua.includes("iPhone") || ua.includes("iPad")) && !ua.includes("Safari") && !ua.includes("CriOS") && !ua.includes("FxiOS")
  },
  {
    name: "Android WebView",
    validate: (ua) => ua.includes("wv") && ua.includes("Android")
  }
];
function captureDeviceInformation() {
  return __async(this, null, function* () {
    var _a;
    try {
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;
      const url = window.location.href;
      const deviceInfo = {
        url,
        viewport_width: viewportWidth,
        viewport_height: viewportHeight,
        device_type: detectDeviceType(),
        browser: yield detectBrowserDetails(),
        screen_info: {
          width: window.screen.width,
          height: window.screen.height,
          pixel_ratio: window.devicePixelRatio,
          color_depth: window.screen.colorDepth,
          orientation: ((_a = window.screen.orientation) == null ? void 0 : _a.type) || "unknown",
          // Add modern screen property support
          availWidth: window.screen.availWidth,
          availHeight: window.screen.availHeight
        },
        operating_system: detectOperatingSystem(),
        connection_info: getConnectionInfo(),
        memory_info: getMemoryInfo(),
        hardware_concurrency: navigator.hardwareConcurrency || "unknown",
        // Add language preferences
        language: navigator.language || "unknown",
        languages: Array.isArray(navigator.languages) ? navigator.languages : [navigator.language || "unknown"],
        // Add color scheme preference
        preferred_color_scheme: detectColorScheme(),
        // Add reduced motion preference
        prefers_reduced_motion: detectReducedMotion(),
        // Add timezone information
        timezone: {
          name: Intl.DateTimeFormat().resolvedOptions().timeZone,
          offset: (/* @__PURE__ */ new Date()).getTimezoneOffset()
        },
        // Add additional context about the browser environment
        browser_context: detectBrowserContext(),
        // Add PWA/standalone mode detection
        display_mode: detectDisplayMode(),
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        // Device capabilities will be added below
        capabilities: {
          touch: "ontouchstart" in window,
          pointer: "PointerEvent" in window,
          mouse: "onmousemove" in window,
          keyboard: "onkeydown" in window,
          max_touch_points: navigator.maxTouchPoints || 0,
          web_assembly: typeof WebAssembly === "object",
          service_worker: "serviceWorker" in navigator,
          clipboard: navigator.clipboard !== void 0,
          share: "share" in navigator,
          bluetooth: "bluetooth" in navigator,
          usb: "usb" in navigator,
          gamepad: "getGamepads" in navigator,
          vibration: "vibrate" in navigator,
          battery: "getBattery" in navigator
        }
      };
      try {
        if (navigator.storage && navigator.storage.estimate) {
          const storageEstimate = yield navigator.storage.estimate();
          deviceInfo.storage = {
            quota: storageEstimate.quota,
            usage: storageEstimate.usage,
            percentUsed: storageEstimate.quota ? Math.round(storageEstimate.usage / storageEstimate.quota * 100) : null
          };
        }
      } catch (e) {
        deviceInfo.storage = { error: "Unable to access storage information" };
      }
      return deviceInfo;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      return {
        url: window.location.href,
        viewport_width: window.innerWidth,
        viewport_height: window.innerHeight,
        device_type: detectDeviceType(),
        browser: {
          name: navigator.userAgent,
          version: "unknown"
        },
        operating_system: detectOperatingSystem(),
        error: errorMessage
      };
    }
  });
}
function detectDeviceType() {
  const uaData = getUserAgentData();
  if (uaData && uaData.mobile) {
    return window.innerWidth >= 768 ? "tablet" : "mobile";
  }
  const userAgent = navigator.userAgent.toLowerCase();
  const isTablet = /(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(
    userAgent
  );
  const isMobile = /Mobile|Android|iP(hone|od)|IEMobile|BlackBerry|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(
    userAgent
  );
  const viewportWidth = window.innerWidth;
  if (isTablet || !isMobile && viewportWidth < 1024 && viewportWidth >= 768) {
    return "tablet";
  } else if (isMobile || viewportWidth < 768) {
    return "mobile";
  } else if (/(smart[-]?tv|hbbtv|appletv|tvos|tizen|webos)/i.test(userAgent)) {
    return "smarttv";
  } else if (/Xbox|PlayStation|Nintendo/i.test(userAgent)) {
    return "gaming_console";
  } else {
    return "desktop";
  }
}
function detectBrowserDetails() {
  return __async(this, null, function* () {
    const browserInfo = {
      name: "unknown",
      version: "unknown",
      engine: "unknown",
      user_agent: navigator.userAgent
    };
    const uaData = getUserAgentData();
    if (uaData) {
      try {
        const brands = uaData.brands;
        if (brands && brands.length) {
          const brandDetails = brands.find(
            (b) => !b.brand.includes("Not") && b.brand !== "Chromium"
          );
          if (brandDetails) {
            browserInfo.name = brandDetails.brand;
            browserInfo.version = brandDetails.version;
          }
        }
        try {
          if ("getHighEntropyValues" in uaData) {
            const highEntropyValues = yield uaData.getHighEntropyValues([
              "architecture",
              "model",
              "platform",
              "platformVersion",
              "fullVersionList"
            ]);
            if (highEntropyValues.fullVersionList && highEntropyValues.fullVersionList.length) {
              const mainBrand = highEntropyValues.fullVersionList.find(
                (b) => !b.brand.includes("Not") && b.brand !== "Chromium"
              );
              if (mainBrand) {
                browserInfo.name = mainBrand.brand;
                browserInfo.version = mainBrand.version;
              }
            }
            browserInfo.platform = {
              name: highEntropyValues.platform || "unknown",
              version: highEntropyValues.platformVersion || "unknown",
              architecture: highEntropyValues.architecture || "unknown",
              model: highEntropyValues.model || "unknown"
            };
            browserInfo.mobile = uaData.mobile;
          }
        } catch (e) {
          browserInfo.platform = {
            name: uaData.platform || "unknown",
            mobile: uaData.mobile
          };
        }
        return browserInfo;
      } catch (error) {
        console.warn("Error getting userAgentData:", error);
      }
    }
    const ua = navigator.userAgent;
    for (const pattern of WEBVIEW_PATTERNS) {
      if (pattern.validate(ua)) {
        browserInfo.name = pattern.name;
        return browserInfo;
      }
    }
    for (const pattern of BROWSER_PATTERNS) {
      const match = ua.match(pattern.regex);
      if (match && (!pattern.validate || pattern.validate(ua))) {
        browserInfo.name = pattern.name;
        browserInfo.version = pattern.getVersion ? pattern.getVersion(match, ua) : match[1] || "unknown";
        if (pattern.properties) {
          Object.assign(browserInfo, pattern.properties);
        }
        break;
      }
    }
    return browserInfo;
  });
}
function getConnectionInfo() {
  const nav = navigator;
  const connection = nav.connection || nav.mozConnection || nav.webkitConnection;
  if (!connection) {
    return { available: false };
  }
  return {
    available: true,
    type: connection.type || "unknown",
    effectiveType: connection.effectiveType || "unknown",
    downlinkMax: connection.downlinkMax,
    downlink: connection.downlink,
    rtt: connection.rtt,
    saveData: connection.saveData
  };
}
function getMemoryInfo() {
  const navigatorWithMemory = navigator;
  const performanceWithMemory = performance;
  if (!navigatorWithMemory.deviceMemory && !performanceWithMemory.memory) {
    return { available: false };
  }
  const memory = {
    available: true,
    deviceMemory: navigatorWithMemory.deviceMemory
  };
  if (performanceWithMemory.memory) {
    memory.jsHeapSizeLimit = performanceWithMemory.memory.jsHeapSizeLimit;
    memory.totalJSHeapSize = performanceWithMemory.memory.totalJSHeapSize;
    memory.usedJSHeapSize = performanceWithMemory.memory.usedJSHeapSize;
  }
  return memory;
}
function detectOperatingSystem() {
  const osInfo = {
    name: "unknown",
    version: "unknown"
  };
  const uaData = getUserAgentData();
  if (uaData && uaData.platform) {
    osInfo.name = uaData.platform;
    return osInfo;
  }
  const userAgent = navigator.userAgent;
  if (/Windows/.test(userAgent)) {
    osInfo.name = "Windows";
    if (/Windows NT 10.0/.test(userAgent)) osInfo.version = "10";
    else if (/Windows NT 6.3/.test(userAgent)) osInfo.version = "8.1";
    else if (/Windows NT 6.2/.test(userAgent)) osInfo.version = "8";
    else if (/Windows NT 6.1/.test(userAgent)) osInfo.version = "7";
    else if (/Windows NT 6.0/.test(userAgent)) osInfo.version = "Vista";
    else if (/Windows NT 5.1/.test(userAgent)) osInfo.version = "XP";
  } else if (/Macintosh|Mac OS X/.test(userAgent)) {
    osInfo.name = "macOS";
    const macVersion = userAgent.match(/Mac OS X ([0-9_]+)/);
    if (macVersion && macVersion[1]) {
      osInfo.version = macVersion[1].replace(/_/g, ".");
    }
  } else if (/Linux/.test(userAgent)) {
    osInfo.name = "Linux";
    if (/Android/.test(userAgent)) {
      osInfo.name = "Android";
      const match = userAgent.match(/Android ([0-9.]+)/);
      if (match && match[1]) osInfo.version = match[1];
    }
  } else if (/iPhone|iPad|iPod/.test(userAgent)) {
    osInfo.name = "iOS";
    const iosVersion = userAgent.match(/OS ([0-9_]+) like Mac OS X/);
    if (iosVersion && iosVersion[1]) {
      osInfo.version = iosVersion[1].replace(/_/g, ".");
    }
  } else if (/CrOS/.test(userAgent)) {
    osInfo.name = "Chrome OS";
  }
  return osInfo;
}
function detectColorScheme() {
  if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
    return "dark";
  } else if (window.matchMedia && window.matchMedia("(prefers-color-scheme: light)").matches) {
    return "light";
  } else {
    return "no-preference";
  }
}
function detectReducedMotion() {
  return window.matchMedia && window.matchMedia("(prefers-reduced-motion: reduce)").matches;
}
function detectDisplayMode() {
  if (window.matchMedia("(display-mode: standalone)").matches || window.matchMedia("(display-mode: fullscreen)").matches || navigator.standalone) {
    return "standalone";
  }
  return "browser";
}
function detectBrowserContext() {
  const ua = navigator.userAgent.toLowerCase();
  if (ua.includes("instagram")) {
    return "instagram";
  } else if (ua.includes("fbav") || ua.includes("fban")) {
    return "facebook";
  } else if (ua.includes("twitter")) {
    return "twitter";
  } else if (ua.includes("linkedin")) {
    return "linkedin";
  } else if (ua.includes("electron")) {
    return "electron";
  } else if (ua.includes("wv") && ua.includes("android")) {
    return "android-webview";
  } else if ((ua.includes("iphone") || ua.includes("ipad")) && !ua.includes("safari") && !ua.includes("crios") && !ua.includes("firefox")) {
    return "ios-webview";
  } else {
    return "browser";
  }
}

// src/hooks/use-feedback.ts
import ky2 from "ky";
import equal from "fast-deep-equal";
var queryKeys = {
  feedbackList: ["feedback"]
};
var useFeedbackList = () => {
  const { apiKey, robinURL, extraHeaders } = useRobinContext();
  return useQuery2({
    queryKey: queryKeys.feedbackList,
    queryFn: () => __async(void 0, null, function* () {
      return ky2.get(
        `${robinURL}/api/feedback?relative_url=${location.pathname}`,
        {
          headers: __spreadValues({
            "Content-Type": "application/json",
            Authorization: `Bearer ${apiKey}`
          }, extraHeaders)
        }
      ).json();
    }),
    refetchInterval: 2e4
  });
};
var useCreatePageFeedback = () => {
  const queryClient2 = useQueryClient();
  const { apiKey, robinURL, extraHeaders } = useRobinContext();
  return useMutation({
    mutationFn: (_0) => __async(void 0, [_0], function* ({ comment }) {
      const snap = snapshot(document);
      const deviceInfo = yield captureDeviceInformation();
      return ky2.post(`${robinURL}/api/feedback`, {
        headers: __spreadValues({
          Authorization: `Bearer ${apiKey}`
        }, extraHeaders),
        json: {
          api_key: apiKey,
          description: comment,
          relative_url: location.pathname,
          url: location.href,
          snapshot: snap,
          device_info: deviceInfo
        }
      }).json();
    }),
    onSuccess: () => {
      queryClient2.invalidateQueries({ queryKey: queryKeys.feedbackList });
    }
  });
};
var useCreateElementFeedback = () => {
  const queryClient2 = useQueryClient();
  const { apiKey, robinURL, extraHeaders } = useRobinContext();
  return useMutation({
    mutationFn: (_0) => __async(void 0, [_0], function* ({
      comment,
      element,
      currentStyles,
      originalStyles,
      originalSnap
    }) {
      var _a;
      let outputSnap = null;
      if (!equal(currentStyles, originalStyles)) {
        element.setAttribute("data-robin-target", "true");
        outputSnap = snapshot(document);
        element.removeAttribute("data-robin-target");
      }
      const deviceInfo = yield captureDeviceInformation();
      return ky2.post(`${robinURL}/api/feedback`, {
        headers: __spreadValues({
          Authorization: `Bearer ${apiKey}`
        }, extraHeaders),
        json: {
          api_key: apiKey,
          description: comment,
          relative_url: location.pathname,
          url: location.href,
          snapshot: originalSnap,
          output_snapshot: outputSnap,
          device_info: deviceInfo,
          context_html: encodeURIComponent(
            ((_a = element.parentElement) == null ? void 0 : _a.outerHTML) || ""
          ),
          html: encodeURIComponent(element.outerHTML),
          style_changes: Object.keys(currentStyles).filter(
            (property) => currentStyles[property] !== originalStyles[property]
          ).map((property) => ({
            property,
            originalValue: originalStyles[property],
            desiredValue: currentStyles[property]
          }))
        }
      }).json();
    }),
    onSuccess: () => {
      queryClient2.invalidateQueries({ queryKey: queryKeys.feedbackList });
    }
  });
};

// src/hooks/use-media-query.ts
import * as React from "react";
function useMediaQuery(query) {
  const [value, setValue] = React.useState(false);
  React.useEffect(() => {
    function onChange(event) {
      setValue(event.matches);
    }
    const result = matchMedia(query);
    result.addEventListener("change", onChange);
    setValue(result.matches);
    return () => result.removeEventListener("change", onChange);
  }, [query]);
  return value;
}

// src/lib/utils.ts
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";
function cn(...inputs) {
  return twMerge(clsx(inputs));
}

// src/components/ui/badge.tsx
import { cva } from "class-variance-authority";
import { jsx } from "react/jsx-runtime";
var badgeVariants = cva(
  "robin-inline-flex robin-items-center robin-rounded-md robin-border robin-px-2.5 robin-py-0.5 robin-text-xs robin-font-semibold robin-transition-colors focus:robin-outline-none focus:robin-ring-2 focus:robin-ring-ring focus:robin-ring-offset-2",
  {
    variants: {
      variant: {
        default: "robin-border-transparent robin-bg-primary robin-text-primary-foreground robin-shadow hover:robin-bg-primary/80",
        secondary: "robin-border-transparent robin-bg-secondary robin-text-secondary-foreground hover:robin-bg-secondary/80",
        destructive: "robin-border-transparent robin-bg-destructive robin-text-destructive-foreground robin-shadow hover:robin-bg-destructive/80",
        outline: "robin-text-foreground"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
);
function Badge(_a) {
  var _b = _a, { className, variant } = _b, props = __objRest(_b, ["className", "variant"]);
  return /* @__PURE__ */ jsx("div", __spreadValues({ className: cn(badgeVariants({ variant }), className) }, props));
}

// src/components/ui/button.tsx
import * as React2 from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva as cva2 } from "class-variance-authority";
import { jsx as jsx2 } from "react/jsx-runtime";
var buttonVariants = cva2(
  "robin-inline-flex robin-items-center robin-justify-center robin-gap-2 robin-whitespace-nowrap robin-rounded-md robin-text-sm robin-font-medium robin-transition-colors focus-visible:robin-outline-none focus-visible:robin-ring-1 focus-visible:robin-ring-ring disabled:robin-pointer-events-none disabled:robin-opacity-50 [&_svg]:robin-pointer-events-none [&_svg]:robin-size-4 [&_svg]:robin-shrink-0",
  {
    variants: {
      variant: {
        default: "robin-bg-primary robin-text-primary-foreground robin-shadow hover:robin-bg-primary/90",
        destructive: "robin-bg-destructive robin-text-destructive-foreground robin-shadow-sm hover:robin-bg-destructive/90",
        outline: "robin-border robin-border-input robin-bg-background robin-shadow-sm hover:robin-bg-accent hover:robin-text-accent-foreground",
        secondary: "robin-bg-secondary robin-text-secondary-foreground robin-shadow-sm hover:robin-bg-secondary/80",
        ghost: "hover:robin-bg-accent hover:robin-text-accent-foreground",
        link: "robin-text-primary robin-underline-offset-4 hover:robin-underline"
      },
      size: {
        default: "robin-h-9 robin-px-4 robin-py-2",
        sm: "robin-h-8 robin-rounded-md robin-px-3 robin-text-xs",
        lg: "robin-h-10 robin-rounded-md robin-px-8",
        icon: "robin-h-9 robin-w-9"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);
var Button = React2.forwardRef(
  (_a, ref) => {
    var _b = _a, { className, variant, size, asChild = false } = _b, props = __objRest(_b, ["className", "variant", "size", "asChild"]);
    const Comp = asChild ? Slot : "button";
    return /* @__PURE__ */ jsx2(
      Comp,
      __spreadValues({
        className: cn(buttonVariants({ variant, size, className })),
        ref
      }, props)
    );
  }
);
Button.displayName = "Button";

// src/components/ui/drawer.tsx
import * as React3 from "react";
import { Drawer as DrawerPrimitive } from "vaul";
import { jsx as jsx3, jsxs } from "react/jsx-runtime";
var Drawer = (_a) => {
  var _b = _a, {
    shouldScaleBackground = true
  } = _b, props = __objRest(_b, [
    "shouldScaleBackground"
  ]);
  return /* @__PURE__ */ jsx3(
    DrawerPrimitive.Root,
    __spreadValues({
      shouldScaleBackground
    }, props)
  );
};
Drawer.displayName = "Drawer";
var DrawerTrigger = DrawerPrimitive.Trigger;
var DrawerPortal = DrawerPrimitive.Portal;
var DrawerClose = DrawerPrimitive.Close;
var DrawerOverlay = React3.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx3(
    DrawerPrimitive.Overlay,
    __spreadValues({
      ref,
      className: cn("robin-fixed robin-inset-0 robin-z-50 robin-bg-transparent", className)
    }, props)
  );
});
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;
var DrawerContent = React3.forwardRef((_a, ref) => {
  var _b = _a, { className, children } = _b, props = __objRest(_b, ["className", "children"]);
  return /* @__PURE__ */ jsx3(DrawerPortal, { children: /* @__PURE__ */ jsxs("div", { className: "robin-root", children: [
    /* @__PURE__ */ jsx3(DrawerOverlay, {}),
    /* @__PURE__ */ jsxs(
      DrawerPrimitive.Content,
      __spreadProps(__spreadValues({
        ref,
        className: cn(
          "robin-fixed robin-inset-x-0 robin-bottom-0 robin-z-50 robin-mt-24 robin-flex robin-h-auto robin-flex-col robin-rounded-t-[10px] robin-border robin-bg-background",
          className
        )
      }, props), {
        children: [
          /* @__PURE__ */ jsx3("div", { className: "robin-mx-auto robin-mt-4 robin-h-2 robin-w-[100px] robin-rounded-full robin-bg-muted" }),
          children
        ]
      })
    )
  ] }) });
});
DrawerContent.displayName = "DrawerContent";
var DrawerHeader = (_a) => {
  var _b = _a, {
    className
  } = _b, props = __objRest(_b, [
    "className"
  ]);
  return /* @__PURE__ */ jsx3(
    "div",
    __spreadValues({
      className: cn("robin-grid robin-gap-1.5 robin-p-4 robin-text-center sm:robin-text-left", className)
    }, props)
  );
};
DrawerHeader.displayName = "DrawerHeader";
var DrawerFooter = (_a) => {
  var _b = _a, {
    className
  } = _b, props = __objRest(_b, [
    "className"
  ]);
  return /* @__PURE__ */ jsx3(
    "div",
    __spreadValues({
      className: cn("robin-mt-auto robin-flex robin-flex-col robin-gap-2 robin-p-4", className)
    }, props)
  );
};
DrawerFooter.displayName = "DrawerFooter";
var DrawerTitle = React3.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx3(
    DrawerPrimitive.Title,
    __spreadValues({
      ref,
      className: cn(
        "robin-text-lg robin-font-semibold robin-leading-none robin-tracking-tight",
        className
      )
    }, props)
  );
});
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;
var DrawerDescription = React3.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx3(
    DrawerPrimitive.Description,
    __spreadValues({
      ref,
      className: cn("robin-text-sm robin-text-muted-foreground", className)
    }, props)
  );
});
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

// src/components/ui/popover.tsx
import * as React4 from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import { jsx as jsx4 } from "react/jsx-runtime";
var Popover = PopoverPrimitive.Root;
var PopoverTrigger = PopoverPrimitive.Trigger;
var PopoverContent = React4.forwardRef((_a, ref) => {
  var _b = _a, { className, align = "center", sideOffset = 4 } = _b, props = __objRest(_b, ["className", "align", "sideOffset"]);
  return /* @__PURE__ */ jsx4(PopoverPrimitive.Portal, { children: /* @__PURE__ */ jsx4("div", { className: "robin-root", children: /* @__PURE__ */ jsx4(
    PopoverPrimitive.Content,
    __spreadValues({
      ref,
      align,
      sideOffset,
      className: cn(
        "robin-z-50 robin-w-72 robin-rounded-md robin-border robin-bg-popover robin-p-4 robin-text-popover-foreground robin-shadow-md robin-outline-none data-[state=open]:robin-animate-in data-[state=closed]:robin-animate-out data-[state=closed]:robin-fade-out-0 data-[state=open]:robin-fade-in-0 data-[state=closed]:robin-zoom-out-95 data-[state=open]:robin-zoom-in-95 data-[side=bottom]:robin-slide-in-from-top-2 data-[side=left]:robin-slide-in-from-right-2 data-[side=right]:robin-slide-in-from-left-2 data-[side=top]:robin-slide-in-from-bottom-2 robin-origin-[--radix-popover-content-transform-origin]",
        className
      )
    }, props)
  ) }) });
});
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

// src/components/ui/textarea.tsx
import * as React5 from "react";
import { jsx as jsx5 } from "react/jsx-runtime";
var Textarea = React5.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx5(
    "textarea",
    __spreadValues({
      className: cn(
        "robin-flex robin-min-h-[60px] robin-w-full robin-rounded-md robin-border robin-border-input robin-bg-transparent robin-px-3 robin-py-2 robin-text-sm robin-shadow-sm placeholder:robin-text-muted-foreground focus-visible:robin-outline-none focus-visible:robin-ring-1 focus-visible:robin-ring-ring disabled:robin-cursor-not-allowed disabled:robin-opacity-50 md:robin-text-sm",
        className
      ),
      ref
    }, props)
  );
});
Textarea.displayName = "Textarea";

// src/components/ui/typography.tsx
import { jsx as jsx6 } from "react/jsx-runtime";
function TypographyH3(props) {
  const _a = props, { children, className } = _a, rest = __objRest(_a, ["children", "className"]);
  return /* @__PURE__ */ jsx6(
    "h3",
    __spreadProps(__spreadValues({
      className: cn(
        "robin-scroll-m-20 robin-text-2xl robin-font-semibold robin-tracking-tight",
        className
      )
    }, rest), {
      children
    })
  );
}
function TypographyH4(props) {
  const _a = props, { children, className } = _a, rest = __objRest(_a, ["children", "className"]);
  return /* @__PURE__ */ jsx6(
    "h4",
    __spreadProps(__spreadValues({
      className: cn(
        "robin-scroll-m-20 robin-text-xl robin-font-semibold robin-tracking-tight",
        className
      )
    }, rest), {
      children
    })
  );
}
function TypographyMuted(props) {
  const _a = props, { children, className } = _a, rest = __objRest(_a, ["children", "className"]);
  return /* @__PURE__ */ jsx6(
    "p",
    __spreadProps(__spreadValues({
      className: cn(
        "robin-text-sm robin-text-muted-foreground",
        className
      )
    }, rest), {
      children
    })
  );
}

// src/components/page-drawer.tsx
import { Fragment, jsx as jsx7, jsxs as jsxs2 } from "react/jsx-runtime";
function RobinPageDrawer({
  isPageDrawerOpen,
  setIsPageDrawerOpen,
  onSelectElementClick
}) {
  var _a;
  const { robinURL } = useRobinContext();
  const [showPageForm, setShowPageForm] = useState2(false);
  const isMobile = useMediaQuery("(max-width: 768px)");
  const { data: health } = useHealth();
  const { data: feedbackList } = useFeedbackList();
  const createPageFeedback = useCreatePageFeedback();
  const submitPageFeedback = (comment) => __async(this, null, function* () {
    yield createPageFeedback.mutateAsync({
      comment
    });
    setShowPageForm(false);
    setIsPageDrawerOpen(false);
  });
  const contentProps = {
    showPageForm,
    setShowPageForm,
    onSelectElementClick,
    submitPageFeedback,
    createPageFeedback,
    feedbackList,
    robinURL
  };
  const inProgressFeedbackCount = (_a = feedbackList == null ? void 0 : feedbackList.filter(
    (feedback) => feedback.status === "processing"
  )) == null ? void 0 : _a.length;
  if (!isMobile) {
    return /* @__PURE__ */ jsxs2(Popover, { onOpenChange: setIsPageDrawerOpen, open: isPageDrawerOpen, children: [
      /* @__PURE__ */ jsx7(PopoverTrigger, { asChild: true, children: /* @__PURE__ */ jsx7("span", { className: "robin-fixed robin-bottom-5 robin-right-5", children: /* @__PURE__ */ jsx7(TriggerButton, { feedbackCount: inProgressFeedbackCount }) }) }),
      /* @__PURE__ */ jsx7(
        PopoverContent,
        {
          align: "end",
          className: "!robin-border-0 robin-w-96 robin-flex robin-flex-col robin-bg-popover robin-gap-4",
          children: /* @__PURE__ */ jsx7(PageDrawerContent, __spreadValues({}, contentProps))
        }
      )
    ] });
  }
  return /* @__PURE__ */ jsxs2(Drawer, { onOpenChange: setIsPageDrawerOpen, open: isPageDrawerOpen, children: [
    /* @__PURE__ */ jsx7(DrawerTrigger, { asChild: true, children: /* @__PURE__ */ jsx7("span", { className: "robin-fixed robin-bottom-5 robin-right-5", children: /* @__PURE__ */ jsx7(TriggerButton, { feedbackCount: inProgressFeedbackCount }) }) }),
    /* @__PURE__ */ jsxs2(DrawerContent, { className: "!robin-border-0 robin-flex robin-flex-col robin-gap-4 robin-p-4", children: [
      /* @__PURE__ */ jsxs2(DrawerHeader, { children: [
        /* @__PURE__ */ jsx7(DrawerTitle, { className: "robin-sr-only", children: "Page Changes" }),
        /* @__PURE__ */ jsx7(DrawerDescription, { className: "robin-sr-only", children: "Describe the changes you want to make to the page." })
      ] }),
      /* @__PURE__ */ jsx7(PageDrawerContent, __spreadValues({}, contentProps)),
      /* @__PURE__ */ jsx7(DrawerFooter, {})
    ] })
  ] });
}
function TriggerButton({ feedbackCount }) {
  return /* @__PURE__ */ jsxs2(Button, { className: "robin-rounded-[31%] !robin-px-2", size: "sm", type: "button", children: [
    feedbackCount && feedbackCount > 0 ? /* @__PURE__ */ jsx7(
      Badge,
      {
        className: "!robin-rounded-full robin-animate-fadeIn text-xs",
        variant: "secondary",
        children: /* @__PURE__ */ jsx7("span", { className: "robin-animate-number", children: feedbackCount }, feedbackCount)
      }
    ) : null,
    /* @__PURE__ */ jsx7(MousePointerClick, { className: "robin-w-5 robin-h-5" })
  ] });
}
function PageDrawerContent({
  showPageForm,
  setShowPageForm,
  onSelectElementClick,
  submitPageFeedback,
  createPageFeedback,
  feedbackList,
  robinURL
}) {
  const [comment, setComment] = useState2("");
  if (showPageForm) {
    return /* @__PURE__ */ jsxs2(Fragment, { children: [
      /* @__PURE__ */ jsx7("div", { children: /* @__PURE__ */ jsxs2(
        Button,
        {
          className: "-robin-ml-4",
          variant: "link",
          onClick: () => setShowPageForm(false),
          children: [
            /* @__PURE__ */ jsx7(ChevronLeft, { className: "robin-w-4 robin-h-4" }),
            "Back"
          ]
        }
      ) }),
      /* @__PURE__ */ jsxs2(
        "form",
        {
          className: "robin-flex robin-flex-col robin-gap-4",
          onSubmit: (e) => {
            e.preventDefault();
            submitPageFeedback(comment);
          },
          children: [
            /* @__PURE__ */ jsxs2("div", { children: [
              /* @__PURE__ */ jsx7(
                Textarea,
                {
                  value: comment,
                  onChange: (e) => setComment(e.target.value),
                  name: "page_comment",
                  placeholder: "Ask for changes in this page..."
                }
              ),
              /* @__PURE__ */ jsx7(TypographyMuted, { children: "Ex. Change the page title to..." })
            ] }),
            /* @__PURE__ */ jsx7("div", { className: "robin-flex robin-justify-end", children: /* @__PURE__ */ jsx7(
              Button,
              {
                disabled: createPageFeedback.isPending || !comment,
                type: "submit",
                children: createPageFeedback.isPending ? "Applying..." : "Apply Changes"
              }
            ) })
          ]
        }
      )
    ] });
  }
  return /* @__PURE__ */ jsxs2(Fragment, { children: [
    /* @__PURE__ */ jsx7(TypographyH3, { className: "robin-text-primary", children: "Hello! \u{1F44B}" }),
    feedbackList && feedbackList.length > 0 && /* @__PURE__ */ jsx7(FeedbackList, { feedbackList, robinURL }),
    /* @__PURE__ */ jsx7(Button, { onClick: onSelectElementClick, className: "robin-w-full", children: "Select an element" }),
    /* @__PURE__ */ jsxs2("div", { className: "robin-flex robin-items-center", children: [
      /* @__PURE__ */ jsx7("div", { className: "robin-flex-grow robin-border-t robin-border-border" }),
      /* @__PURE__ */ jsx7("span", { className: "robin-px-2 robin-text-xs robin-text-muted-foreground", children: "or" }),
      /* @__PURE__ */ jsx7("div", { className: "robin-flex-grow robin-border-t robin-border-border" })
    ] }),
    /* @__PURE__ */ jsx7("div", { className: "robin-flex robin-justify-center", children: /* @__PURE__ */ jsx7(Button, { variant: "ghost", size: "sm", onClick: () => setShowPageForm(true), children: "Make changes to the page" }) })
  ] });
}
function FeedbackList({
  feedbackList,
  robinURL
}) {
  return /* @__PURE__ */ jsxs2("div", { className: "robin-bg-muted robin-p-3 robin-rounded-md robin-shadow-sm", children: [
    /* @__PURE__ */ jsx7(TypographyH4, { className: "robin-text-primary robin-mb-2", children: "Recent Feedback" }),
    /* @__PURE__ */ jsx7("div", { className: "robin-flex robin-flex-col robin-gap-1 robin-divide-y robin-divide-border", children: feedbackList.map((feedback) => /* @__PURE__ */ jsx7("div", { className: "robin-py-2", children: /* @__PURE__ */ jsxs2("div", { children: [
      /* @__PURE__ */ jsx7("div", { className: "robin-text-sm robin-font-medium", children: feedback.description || "Style changes" }),
      /* @__PURE__ */ jsxs2("div", { className: "robin-text-xs robin-text-muted-foreground robin-mt-1 robin-flex robin-items-center robin-gap-2", children: [
        new Date(feedback.created_at).toLocaleDateString(),
        feedback.pull_requests.length > 0 ? /* @__PURE__ */ jsxs2(
          "a",
          {
            className: cn(
              badgeVariants({ variant: "outline" }),
              "robin-truncate robin-flex-1"
            ),
            href: feedback.pull_requests[0].github_pr_url,
            target: "_blank",
            children: [
              /* @__PURE__ */ jsx7(GitPullRequestArrow, { className: "robin-h-3 robin-w-3 robin-mr-2" }),
              /* @__PURE__ */ jsx7("span", { className: "robin-truncate robin-flex-1", children: feedback.pull_requests[0].github_pr_title })
            ]
          }
        ) : /* @__PURE__ */ jsx7(Badge, { variant: "outline", children: feedback.status })
      ] })
    ] }, feedback.id) }, feedback.id)) })
  ] });
}

// src/components/element-highlighter.tsx
import { jsx as jsx8 } from "react/jsx-runtime";
function RobinElementHighlighter({
  element,
  selectElement
}) {
  const rect = element.getBoundingClientRect();
  const { top, left, height, width } = rect;
  return /* @__PURE__ */ jsx8(
    "div",
    {
      className: "robin-absolute robin-pointer-events-none robin-ring-2 robin-ring-offset-2",
      onClick: (e) => {
        e.preventDefault();
        e.stopPropagation();
        selectElement();
      },
      style: {
        top: `${top + window.scrollY}px`,
        left: `${left + window.scrollX}px`,
        height: `${height}px`,
        width: `${width}px`,
        zIndex: 1e3,
        cursor: "pointer"
      },
      onMouseEnter: (e) => {
        e.currentTarget.style.pointerEvents = "auto";
      },
      onMouseLeave: (e) => {
        e.currentTarget.style.pointerEvents = "none";
      }
    }
  );
}

// src/components/element-drawer.tsx
import { useEffect as useEffect2 } from "react";

// src/style-manager/style-manager-provider.tsx
import { createContext as createContext2, useContext as useContext2, useRef } from "react";
import { useStore } from "zustand";

// src/style-manager/style-manager-store.ts
import { createStore } from "zustand";

// src/lib/style-manager.ts
function convertLineHeightToUnitless(lineHeightInPx, fontSizeInPx) {
  return parseFloat(
    (parseFloat(lineHeightInPx) / parseFloat(fontSizeInPx)).toFixed(2)
  );
}
function convertLetterSpacingToEm(letterSpacingInPx, fontSizeInPx) {
  if (letterSpacingInPx === "normal") {
    return 0;
  }
  const letterSpacingPx = parseFloat(letterSpacingInPx);
  const fontSizePx = parseFloat(fontSizeInPx);
  const letterSpacingEm = letterSpacingPx / fontSizePx;
  return parseFloat(letterSpacingEm.toFixed(3));
}
function getElementProperties(element) {
  const computedStyle = window.getComputedStyle(element);
  return {
    content: element.textContent || "",
    fontWeight: computedStyle.fontWeight || window.getComputedStyle(document.documentElement).fontWeight,
    fontSizeInPx: parseFloat(computedStyle.fontSize) || parseFloat(window.getComputedStyle(document.documentElement).fontSize),
    lineHeight: convertLineHeightToUnitless(
      computedStyle.lineHeight,
      computedStyle.fontSize
    ),
    letterSpacingInEm: convertLetterSpacingToEm(
      computedStyle.letterSpacing,
      computedStyle.fontSize
    ),
    textAlign: computedStyle.textAlign || "",
    verticalAlign: computedStyle.verticalAlign || "",
    paddingInPx: {
      top: parseFloat(computedStyle.paddingTop),
      right: parseFloat(computedStyle.paddingRight),
      bottom: parseFloat(computedStyle.paddingBottom),
      left: parseFloat(computedStyle.paddingLeft)
    },
    borderInPx: {
      top: parseFloat(computedStyle.borderTopWidth),
      right: parseFloat(computedStyle.borderRightWidth),
      bottom: parseFloat(computedStyle.borderBottomWidth),
      left: parseFloat(computedStyle.borderLeftWidth)
    },
    marginInPx: {
      top: parseFloat(computedStyle.marginTop),
      right: parseFloat(computedStyle.marginRight),
      bottom: parseFloat(computedStyle.marginBottom),
      left: parseFloat(computedStyle.marginLeft)
    },
    color: computedStyle.color || ""
  };
}
function setElementTextContent(element, text) {
  element.textContent = text;
}
function applyStyleChange(element, changes) {
  changes.forEach((change) => {
    element.style[change.property] = change.value;
  });
}
function applyLineHeight(element, lineHeight, fontSize) {
  element.style.lineHeight = `${lineHeight * fontSize}px`;
}
function applyLetterSpacing(element, letterSpacing, fontSize) {
  element.style.letterSpacing = `${letterSpacing * fontSize}px`;
}
function hasDirectTextContent(element) {
  const childNodes = Array.from(element.childNodes);
  return childNodes.some(
    (node) => {
      var _a;
      return node.nodeType === Node.TEXT_NODE && ((_a = node.textContent) == null ? void 0 : _a.trim()) !== "";
    }
  );
}

// src/style-manager/style-manager-store.ts
var applyChanges = (element, changes) => {
  applyStyleChange(element, [
    { property: "paddingTop", value: `${changes.paddingInPx.top}px` },
    { property: "paddingRight", value: `${changes.paddingInPx.right}px` },
    { property: "paddingBottom", value: `${changes.paddingInPx.bottom}px` },
    { property: "paddingLeft", value: `${changes.paddingInPx.left}px` },
    { property: "borderTopWidth", value: `${changes.borderInPx.top}px` },
    { property: "borderRightWidth", value: `${changes.borderInPx.right}px` },
    { property: "borderBottomWidth", value: `${changes.borderInPx.bottom}px` },
    { property: "borderLeftWidth", value: `${changes.borderInPx.left}px` },
    { property: "marginTop", value: `${changes.marginInPx.top}px` },
    { property: "marginRight", value: `${changes.marginInPx.right}px` },
    { property: "marginBottom", value: `${changes.marginInPx.bottom}px` },
    { property: "marginLeft", value: `${changes.marginInPx.left}px` }
  ]);
  if (hasDirectTextContent(element)) {
    setElementTextContent(element, changes.content);
    applyLineHeight(element, changes.lineHeight, changes.fontSizeInPx);
    applyLetterSpacing(
      element,
      changes.letterSpacingInEm,
      changes.fontSizeInPx
    );
    applyStyleChange(element, [
      { property: "textAlign", value: changes.textAlign },
      { property: "verticalAlign", value: changes.verticalAlign },
      { property: "color", value: changes.color },
      { property: "fontWeight", value: changes.fontWeight },
      { property: "fontSize", value: `${changes.fontSizeInPx}px` }
    ]);
  }
};
var createStyleManagerStore = (initProps) => {
  return createStore()((set, get) => {
    const original = {
      content: getElementProperties(initProps.element).content,
      fontWeight: getElementProperties(initProps.element).fontWeight,
      fontSizeInPx: getElementProperties(initProps.element).fontSizeInPx,
      lineHeight: getElementProperties(initProps.element).lineHeight,
      letterSpacingInEm: getElementProperties(initProps.element).letterSpacingInEm,
      textAlign: getElementProperties(initProps.element).textAlign,
      verticalAlign: getElementProperties(initProps.element).verticalAlign,
      paddingInPx: getElementProperties(initProps.element).paddingInPx,
      borderInPx: getElementProperties(initProps.element).borderInPx,
      marginInPx: getElementProperties(initProps.element).marginInPx,
      color: getElementProperties(initProps.element).color
    };
    return {
      element: initProps.element,
      original,
      current: original,
      comment: "",
      setComment: (comment) => {
        set({ comment });
      },
      setContent: (content) => {
        set({ current: __spreadProps(__spreadValues({}, get().current), { content }) });
        setElementTextContent(get().element, content);
      },
      setFontWeight: (fontWeight) => {
        set({ current: __spreadProps(__spreadValues({}, get().current), { fontWeight }) });
        applyStyleChange(get().element, [
          {
            property: "fontWeight",
            value: fontWeight
          }
        ]);
      },
      setFontSize: (fontSizeInPx) => {
        set({ current: __spreadProps(__spreadValues({}, get().current), { fontSizeInPx }) });
        applyStyleChange(get().element, [
          {
            property: "fontSize",
            value: `${fontSizeInPx}px`
          }
        ]);
      },
      setLineHeight: (lineHeight) => {
        set({ current: __spreadProps(__spreadValues({}, get().current), { lineHeight }) });
        applyLineHeight(get().element, lineHeight, get().current.fontSizeInPx);
      },
      setLetterSpacing: (letterSpacingInEm) => {
        set({ current: __spreadProps(__spreadValues({}, get().current), { letterSpacingInEm }) });
        applyLetterSpacing(
          get().element,
          letterSpacingInEm,
          get().current.fontSizeInPx
        );
      },
      setTextAlign: (textAlign) => {
        set({ current: __spreadProps(__spreadValues({}, get().current), { textAlign }) });
        applyStyleChange(get().element, [
          {
            property: "textAlign",
            value: textAlign
          }
        ]);
      },
      setVerticalAlign: (verticalAlign) => {
        set({
          current: __spreadProps(__spreadValues({}, get().current), {
            verticalAlign: verticalAlign || "baseline"
          })
        });
        applyStyleChange(get().element, [
          {
            property: "verticalAlign",
            value: verticalAlign || "baseline"
          }
        ]);
      },
      setMargin: (margin, direction, locked) => {
        if (locked) {
          set({
            current: __spreadProps(__spreadValues({}, get().current), {
              marginInPx: {
                top: margin,
                right: margin,
                bottom: margin,
                left: margin
              }
            })
          });
        } else {
          set({
            current: __spreadProps(__spreadValues({}, get().current), {
              marginInPx: __spreadProps(__spreadValues({}, get().current.marginInPx), { [direction]: margin })
            })
          });
        }
        const marginInPx = get().current.marginInPx;
        applyStyleChange(get().element, [
          {
            property: "marginTop",
            value: `${marginInPx.top}px`
          },
          {
            property: "marginRight",
            value: `${marginInPx.right}px`
          },
          {
            property: "marginBottom",
            value: `${marginInPx.bottom}px`
          },
          {
            property: "marginLeft",
            value: `${marginInPx.left}px`
          }
        ]);
      },
      setPadding: (padding, direction, locked) => {
        if (locked) {
          set({
            current: __spreadProps(__spreadValues({}, get().current), {
              paddingInPx: {
                top: padding,
                right: padding,
                bottom: padding,
                left: padding
              }
            })
          });
        } else {
          set({
            current: __spreadProps(__spreadValues({}, get().current), {
              paddingInPx: __spreadProps(__spreadValues({}, get().current.paddingInPx), {
                [direction]: padding
              })
            })
          });
        }
        const paddingInPx = get().current.paddingInPx;
        applyStyleChange(get().element, [
          {
            property: "paddingTop",
            value: `${paddingInPx.top}px`
          },
          {
            property: "paddingRight",
            value: `${paddingInPx.right}px`
          },
          {
            property: "paddingBottom",
            value: `${paddingInPx.bottom}px`
          },
          {
            property: "paddingLeft",
            value: `${paddingInPx.left}px`
          }
        ]);
      },
      setBorder: (border, direction, locked) => {
        if (locked) {
          set({
            current: __spreadProps(__spreadValues({}, get().current), {
              borderInPx: {
                top: border,
                right: border,
                bottom: border,
                left: border
              }
            })
          });
        } else {
          set({
            current: __spreadProps(__spreadValues({}, get().current), {
              borderInPx: __spreadProps(__spreadValues({}, get().current.borderInPx), {
                [direction]: border
              })
            })
          });
        }
        const borderInPx = get().current.borderInPx;
        applyStyleChange(get().element, [
          {
            property: "borderTopWidth",
            value: `${borderInPx.top}px`
          },
          {
            property: "borderRightWidth",
            value: `${borderInPx.right}px`
          },
          {
            property: "borderBottomWidth",
            value: `${borderInPx.bottom}px`
          },
          {
            property: "borderLeftWidth",
            value: `${borderInPx.left}px`
          }
        ]);
      },
      setColor: (color) => {
        set({ current: __spreadProps(__spreadValues({}, get().current), { color }) });
        applyStyleChange(get().element, [{ property: "color", value: color }]);
      },
      resetStyles: () => {
        set({ current: get().original });
        applyChanges(get().element, get().original);
      }
    };
  });
};

// src/style-manager/style-manager-provider.tsx
import { jsx as jsx9 } from "react/jsx-runtime";
var StyleManagerContext = createContext2(null);
function StyleManagerProvider(_a) {
  var _b = _a, {
    children,
    originalSnap
  } = _b, props = __objRest(_b, [
    "children",
    "originalSnap"
  ]);
  const storeRef = useRef(null);
  if (!storeRef.current) {
    storeRef.current = createStyleManagerStore(props);
  }
  return /* @__PURE__ */ jsx9(StyleManagerContext.Provider, { value: storeRef.current, children });
}
function useStyleManagerContext(selector) {
  const store = useContext2(StyleManagerContext);
  if (!store)
    throw new Error("Missing StyleManagerContext.Provider in the tree");
  return useStore(store, selector);
}

// src/components/ui/scroll-area.tsx
import * as React6 from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import { jsx as jsx10, jsxs as jsxs3 } from "react/jsx-runtime";
var ScrollArea = React6.forwardRef((_a, ref) => {
  var _b = _a, { className, children } = _b, props = __objRest(_b, ["className", "children"]);
  return /* @__PURE__ */ jsxs3(
    ScrollAreaPrimitive.Root,
    __spreadProps(__spreadValues({
      ref,
      className: cn("robin-relative robin-overflow-hidden", className)
    }, props), {
      children: [
        /* @__PURE__ */ jsx10(ScrollAreaPrimitive.Viewport, { className: "robin-h-full robin-w-full robin-rounded-[inherit]", children }),
        /* @__PURE__ */ jsx10(ScrollBar, {}),
        /* @__PURE__ */ jsx10(ScrollAreaPrimitive.Corner, {})
      ]
    })
  );
});
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;
var ScrollBar = React6.forwardRef((_a, ref) => {
  var _b = _a, { className, orientation = "vertical" } = _b, props = __objRest(_b, ["className", "orientation"]);
  return /* @__PURE__ */ jsx10(
    ScrollAreaPrimitive.ScrollAreaScrollbar,
    __spreadProps(__spreadValues({
      ref,
      orientation,
      className: cn(
        "robin-flex robin-touch-none robin-select-none robin-transition-colors",
        orientation === "vertical" && "robin-h-full robin-w-2.5 robin-border-l robin-border-l-transparent robin-p-[1px]",
        orientation === "horizontal" && "robin-h-2.5 robin-flex-col robin-border-t robin-border-t-transparent robin-p-[1px]",
        className
      )
    }, props), {
      children: /* @__PURE__ */ jsx10(ScrollAreaPrimitive.ScrollAreaThumb, { className: "robin-relative robin-flex-1 robin-rounded-full robin-bg-border" })
    })
  );
});
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

// src/components/visual-editor/colors/color-input.tsx
import { useRef as useRef2 } from "react";

// src/components/ui/input.tsx
import * as React7 from "react";
import { jsx as jsx11 } from "react/jsx-runtime";
var Input = React7.forwardRef(
  (_a, ref) => {
    var _b = _a, { className, type } = _b, props = __objRest(_b, ["className", "type"]);
    return /* @__PURE__ */ jsx11(
      "input",
      __spreadValues({
        type,
        className: cn(
          "robin-flex robin-h-9 robin-w-full robin-rounded-md robin-border robin-border-input robin-bg-transparent robin-px-3 robin-py-1 robin-text-base robin-shadow-sm robin-transition-colors file:robin-border-0 file:robin-bg-transparent file:robin-text-sm file:robin-font-medium file:robin-text-foreground placeholder:robin-text-muted-foreground focus-visible:robin-outline-none focus-visible:robin-ring-1 focus-visible:robin-ring-ring disabled:robin-cursor-not-allowed disabled:robin-opacity-50 md:robin-text-sm",
          className
        ),
        ref
      }, props)
    );
  }
);
Input.displayName = "Input";

// src/components/visual-editor/colors/color-input.tsx
import { jsx as jsx12, jsxs as jsxs4 } from "react/jsx-runtime";
function ColorInput(props) {
  const isTransparent = props.value === "transparent";
  const inputRef = useRef2(null);
  return /* @__PURE__ */ jsx12("div", { children: /* @__PURE__ */ jsxs4(
    Button,
    {
      className: "robin-w-full !robin-justify-start",
      onClick: () => {
        var _a;
        (_a = inputRef.current) == null ? void 0 : _a.click();
      },
      variant: "outline",
      children: [
        /* @__PURE__ */ jsx12(
          "div",
          {
            className: "robin-w-4 robin-h-4 robin-rounded-[2px] robin-relative robin-border robin-border-gray-200",
            style: {
              backgroundColor: props.value,
              backgroundImage: isTransparent ? "linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(-45deg, transparent 75%, #ccc 75%)" : "none",
              backgroundSize: "6px 6px",
              backgroundPosition: "0 0, 0 3px, 3px -3px, -3px 0px"
            }
          }
        ),
        /* @__PURE__ */ jsx12("span", { className: "robin-ml-2 robin-text-sm robin-text-gray-900", children: isTransparent ? "transparent" : props.value.toUpperCase() }),
        /* @__PURE__ */ jsx12(
          Input,
          {
            className: "robin-hidden",
            onChange: (e) => {
              props.onChange(e.target.value);
            },
            ref: inputRef,
            type: "color",
            value: props.value
          }
        )
      ]
    }
  ) });
}

// src/components/visual-editor/typography/text-content.tsx
import { jsx as jsx13, jsxs as jsxs5 } from "react/jsx-runtime";
function TextContent() {
  const content = useStyleManagerContext((state) => state.current.content);
  const setContent = useStyleManagerContext((state) => state.setContent);
  return /* @__PURE__ */ jsxs5("div", { children: [
    /* @__PURE__ */ jsx13("div", { className: "robin-text-xs robin-text-gray-500 robin-mb-1", children: "Text content" }),
    /* @__PURE__ */ jsx13(
      "textarea",
      {
        className: "robin-w-full robin-h-20 robin-px-3 robin-py-2 robin-bg-white robin-border robin-border-gray-200 robin-rounded-md robin-text-sm focus:robin-border-blue-500 focus:robin-ring-1 focus:robin-ring-blue-500",
        onChange: (e) => {
          setContent(e.target.value);
        },
        value: content
      }
    )
  ] });
}

// src/components/ui/select.tsx
import * as React8 from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "@radix-ui/react-icons";
import { jsx as jsx14, jsxs as jsxs6 } from "react/jsx-runtime";
var Select = SelectPrimitive.Root;
var SelectValue = SelectPrimitive.Value;
var SelectTrigger = React8.forwardRef((_a, ref) => {
  var _b = _a, { className, children } = _b, props = __objRest(_b, ["className", "children"]);
  return /* @__PURE__ */ jsxs6(
    SelectPrimitive.Trigger,
    __spreadProps(__spreadValues({
      ref,
      className: cn(
        "robin-flex robin-h-9 robin-w-full robin-items-center robin-justify-between robin-whitespace-nowrap robin-rounded-md robin-border robin-border-input robin-bg-transparent robin-px-3 robin-py-2 robin-text-sm robin-shadow-sm robin-ring-offset-background data-[placeholder]:robin-text-muted-foreground focus:robin-outline-none focus:robin-ring-1 focus:robin-ring-ring disabled:robin-cursor-not-allowed disabled:robin-opacity-50 [&>span]:robin-line-clamp-1",
        className
      )
    }, props), {
      children: [
        children,
        /* @__PURE__ */ jsx14(SelectPrimitive.Icon, { asChild: true, children: /* @__PURE__ */ jsx14(ChevronDownIcon, { className: "robin-h-4 robin-w-4 robin-opacity-50" }) })
      ]
    })
  );
});
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;
var SelectScrollUpButton = React8.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx14(
    SelectPrimitive.ScrollUpButton,
    __spreadProps(__spreadValues({
      ref,
      className: cn(
        "robin-flex robin-cursor-default robin-items-center robin-justify-center robin-py-1",
        className
      )
    }, props), {
      children: /* @__PURE__ */ jsx14(ChevronUpIcon, { className: "robin-h-4 robin-w-4" })
    })
  );
});
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;
var SelectScrollDownButton = React8.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx14(
    SelectPrimitive.ScrollDownButton,
    __spreadProps(__spreadValues({
      ref,
      className: cn(
        "robin-flex robin-cursor-default robin-items-center robin-justify-center robin-py-1",
        className
      )
    }, props), {
      children: /* @__PURE__ */ jsx14(ChevronDownIcon, { className: "robin-h-4 robin-w-4" })
    })
  );
});
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;
var SelectContent = React8.forwardRef((_a, ref) => {
  var _b = _a, { className, children, position = "popper" } = _b, props = __objRest(_b, ["className", "children", "position"]);
  return /* @__PURE__ */ jsx14(SelectPrimitive.Portal, { children: /* @__PURE__ */ jsx14("div", { className: "robin-root", children: /* @__PURE__ */ jsxs6(
    SelectPrimitive.Content,
    __spreadProps(__spreadValues({
      ref,
      className: cn(
        "robin-relative robin-z-50 robin-max-h-[--radix-select-content-available-height] robin-min-w-[8rem] robin-overflow-y-auto robin-overflow-x-hidden robin-rounded-md robin-border robin-bg-popover robin-text-popover-foreground robin-shadow-md data-[state=open]:robin-animate-in data-[state=closed]:robin-animate-out data-[state=closed]:robin-fade-out-0 data-[state=open]:robin-fade-in-0 data-[state=closed]:robin-zoom-out-95 data-[state=open]:robin-zoom-in-95 data-[side=bottom]:robin-slide-in-from-top-2 data-[side=left]:robin-slide-in-from-right-2 data-[side=right]:robin-slide-in-from-left-2 data-[side=top]:robin-slide-in-from-bottom-2 robin-origin-[--radix-select-content-transform-origin]",
        position === "popper" && "data-[side=bottom]:robin-translate-y-1 data-[side=left]:robin--translate-x-1 data-[side=right]:robin-translate-x-1 data-[side=top]:robin--translate-y-1",
        className
      ),
      position
    }, props), {
      children: [
        /* @__PURE__ */ jsx14(SelectScrollUpButton, {}),
        /* @__PURE__ */ jsx14(
          SelectPrimitive.Viewport,
          {
            className: cn(
              "robin-p-1",
              position === "popper" && "robin-h-[var(--radix-select-trigger-height)] robin-w-full robin-min-w-[var(--radix-select-trigger-width)]"
            ),
            children
          }
        ),
        /* @__PURE__ */ jsx14(SelectScrollDownButton, {})
      ]
    })
  ) }) });
});
SelectContent.displayName = SelectPrimitive.Content.displayName;
var SelectLabel = React8.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx14(
    SelectPrimitive.Label,
    __spreadValues({
      ref,
      className: cn("robin-px-2 robin-py-1.5 robin-text-sm robin-font-semibold", className)
    }, props)
  );
});
SelectLabel.displayName = SelectPrimitive.Label.displayName;
var SelectItem = React8.forwardRef((_a, ref) => {
  var _b = _a, { className, children } = _b, props = __objRest(_b, ["className", "children"]);
  return /* @__PURE__ */ jsxs6(
    SelectPrimitive.Item,
    __spreadProps(__spreadValues({
      ref,
      className: cn(
        "robin-relative robin-flex robin-w-full robin-cursor-default robin-select-none robin-items-center robin-rounded-sm robin-py-1.5 robin-pl-2 robin-pr-8 robin-text-sm robin-outline-none focus:robin-bg-accent focus:robin-text-accent-foreground data-[disabled]:robin-pointer-events-none data-[disabled]:robin-opacity-50",
        className
      )
    }, props), {
      children: [
        /* @__PURE__ */ jsx14("span", { className: "robin-absolute robin-right-2 robin-flex robin-h-3.5 robin-w-3.5 robin-items-center robin-justify-center", children: /* @__PURE__ */ jsx14(SelectPrimitive.ItemIndicator, { children: /* @__PURE__ */ jsx14(CheckIcon, { className: "robin-h-4 robin-w-4" }) }) }),
        /* @__PURE__ */ jsx14(SelectPrimitive.ItemText, { children })
      ]
    })
  );
});
SelectItem.displayName = SelectPrimitive.Item.displayName;
var SelectSeparator = React8.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx14(
    SelectPrimitive.Separator,
    __spreadValues({
      ref,
      className: cn("robin--mx-1 robin-my-1 robin-h-px robin-bg-muted", className)
    }, props)
  );
});
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

// src/components/visual-editor/typography/font-weight.tsx
import { jsx as jsx15, jsxs as jsxs7 } from "react/jsx-runtime";
function FontWeight() {
  const fontWeight = useStyleManagerContext(
    (state) => state.current.fontWeight
  );
  const setFontWeight = useStyleManagerContext((state) => state.setFontWeight);
  return /* @__PURE__ */ jsxs7("div", { children: [
    /* @__PURE__ */ jsx15("div", { className: "robin-text-xs robin-text-gray-500 robin-mb-1", children: "Font weight" }),
    /* @__PURE__ */ jsxs7(
      Select,
      {
        onValueChange: (value) => {
          setFontWeight(value);
        },
        value: fontWeight,
        children: [
          /* @__PURE__ */ jsx15(SelectTrigger, { className: "robin-h-10 robin-px-3 robin-bg-white robin-border robin-border-gray-200 robin-rounded-md robin-text-sm robin-w-full", children: /* @__PURE__ */ jsx15(SelectValue, { placeholder: "Regular" }) }),
          /* @__PURE__ */ jsxs7(SelectContent, { className: "robin-root", children: [
            /* @__PURE__ */ jsx15(SelectItem, { value: "300", children: "Light" }),
            /* @__PURE__ */ jsx15(SelectItem, { value: "400", children: "Regular" }),
            /* @__PURE__ */ jsx15(SelectItem, { value: "500", children: "Medium" }),
            /* @__PURE__ */ jsx15(SelectItem, { value: "600", children: "Semibold" }),
            /* @__PURE__ */ jsx15(SelectItem, { value: "700", children: "Bold" })
          ] })
        ]
      }
    )
  ] });
}

// src/components/visual-editor/typography/font-size.tsx
import { jsx as jsx16, jsxs as jsxs8 } from "react/jsx-runtime";
function FontSize() {
  const fontSize = useStyleManagerContext(
    (state) => state.current.fontSizeInPx
  );
  const setFontSize = useStyleManagerContext((state) => state.setFontSize);
  return /* @__PURE__ */ jsxs8("div", { children: [
    /* @__PURE__ */ jsx16("div", { className: "robin-text-xs robin-text-gray-500 robin-mb-1", children: "Font size" }),
    /* @__PURE__ */ jsx16("div", { className: "robin-relative", children: /* @__PURE__ */ jsxs8("div", { className: "robin-flex robin-items-center robin-h-10 robin-pl-3 robin-bg-white robin-border robin-border-gray-200 robin-rounded-md", children: [
      /* @__PURE__ */ jsx16(
        "input",
        {
          className: "robin-w-full robin-bg-transparent robin-border-0 robin-text-sm focus:robin-outline-none",
          min: 1,
          onChange: (e) => {
            setFontSize(parseFloat(e.target.value));
          },
          step: 1,
          type: "number",
          value: String(fontSize)
        }
      ),
      /* @__PURE__ */ jsxs8(
        Select,
        {
          onValueChange: (value) => {
            setFontSize(parseInt(value));
          },
          children: [
            /* @__PURE__ */ jsx16(SelectTrigger, { className: "robin-border-none !robin-bg-transparent !robin-shadow-none !robin-w-9 !robin-p-0 !robin-justify-center focus:!robin-ring-0" }),
            /* @__PURE__ */ jsx16(SelectContent, { className: "robin-root", children: [
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              16,
              18,
              20,
              24,
              30,
              36,
              48,
              60,
              72
            ].map((size) => /* @__PURE__ */ jsx16(SelectItem, { value: size.toString(), children: size }, size)) })
          ]
        }
      )
    ] }) })
  ] });
}

// src/components/visual-editor/typography/line-height.tsx
import { LineHeightIcon } from "@radix-ui/react-icons";
import { jsx as jsx17, jsxs as jsxs9 } from "react/jsx-runtime";
function LineHeight() {
  const lineHeight = useStyleManagerContext(
    (state) => state.current.lineHeight
  );
  const setLineHeight = useStyleManagerContext((state) => state.setLineHeight);
  return /* @__PURE__ */ jsxs9("div", { children: [
    /* @__PURE__ */ jsx17("div", { className: "robin-text-xs robin-text-gray-500 robin-mb-1", children: "Line height" }),
    /* @__PURE__ */ jsxs9("div", { className: "robin-flex robin-items-center robin-h-10 robin-px-3 robin-bg-gray-50 robin-rounded-md robin-w-full", children: [
      /* @__PURE__ */ jsx17(LineHeightIcon, { className: "robin-w-4 robin-h-4 robin-flex-shrink-0" }),
      /* @__PURE__ */ jsx17(
        "input",
        {
          className: "robin-flex-1 robin-ml-2 robin-bg-transparent robin-border-0 robin-text-sm focus:robin-outline-none",
          onChange: (e) => {
            setLineHeight(parseFloat(e.target.value));
          },
          step: "0.1",
          type: "number",
          value: lineHeight
        }
      )
    ] })
  ] });
}

// src/components/visual-editor/typography/letter-spacing.tsx
import { LetterSpacingIcon } from "@radix-ui/react-icons";
import { jsx as jsx18, jsxs as jsxs10 } from "react/jsx-runtime";
function LetterSpacing() {
  const letterSpacing = useStyleManagerContext(
    (state) => state.current.letterSpacingInEm
  );
  const setLetterSpacing = useStyleManagerContext(
    (state) => state.setLetterSpacing
  );
  return /* @__PURE__ */ jsxs10("div", { children: [
    /* @__PURE__ */ jsx18("div", { className: "robin-text-xs robin-text-gray-500 robin-mb-1", children: "Letter spacing" }),
    /* @__PURE__ */ jsxs10("div", { className: "robin-flex robin-items-center robin-h-10 robin-px-3 robin-bg-gray-50 robin-rounded-md robin-w-full", children: [
      /* @__PURE__ */ jsx18(LetterSpacingIcon, { className: "robin-w-4 robin-h-4 robin-flex-shrink-0" }),
      /* @__PURE__ */ jsx18(
        "input",
        {
          className: "robin-flex-1 robin-ml-2 robin-bg-transparent robin-border-0 robin-text-sm focus:robin-outline-none",
          onChange: (e) => {
            setLetterSpacing(parseFloat(e.target.value));
          },
          step: "0.025",
          type: "number",
          value: letterSpacing
        }
      )
    ] })
  ] });
}

// src/components/visual-editor/typography/text-alignment.tsx
import {
  AlignLeft,
  AlignRight,
  AlignCenter,
  AlignVerticalJustifyCenter,
  AlignVerticalJustifyStart,
  AlignVerticalJustifyEnd
} from "lucide-react";

// src/components/ui/toggle-group.tsx
import * as React10 from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";

// src/components/ui/toggle.tsx
import * as React9 from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva as cva3 } from "class-variance-authority";
import { jsx as jsx19 } from "react/jsx-runtime";
var toggleVariants = cva3(
  "robin-inline-flex robin-items-center robin-justify-center robin-gap-2 robin-rounded-md robin-text-sm robin-font-medium robin-transition-colors hover:robin-bg-muted hover:robin-text-muted-foreground focus-visible:robin-outline-none focus-visible:robin-ring-1 focus-visible:robin-ring-ring disabled:robin-pointer-events-none disabled:robin-opacity-50 data-[state=on]:robin-bg-accent data-[state=on]:robin-text-accent-foreground [&_svg]:robin-pointer-events-none [&_svg]:robin-size-4 [&_svg]:robin-shrink-0",
  {
    variants: {
      variant: {
        default: "robin-bg-transparent",
        outline: "robin-border robin-border-input robin-bg-transparent robin-shadow-sm hover:robin-bg-accent hover:robin-text-accent-foreground"
      },
      size: {
        default: "robin-h-9 robin-px-2 robin-min-w-9",
        sm: "robin-h-8 robin-px-1.5 robin-min-w-8",
        lg: "robin-h-10 robin-px-2.5 robin-min-w-10"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);
var Toggle = React9.forwardRef((_a, ref) => {
  var _b = _a, { className, variant, size } = _b, props = __objRest(_b, ["className", "variant", "size"]);
  return /* @__PURE__ */ jsx19(
    TogglePrimitive.Root,
    __spreadValues({
      ref,
      className: cn(toggleVariants({ variant, size, className }))
    }, props)
  );
});
Toggle.displayName = TogglePrimitive.Root.displayName;

// src/components/ui/toggle-group.tsx
import { jsx as jsx20 } from "react/jsx-runtime";
var ToggleGroupContext = React10.createContext({
  size: "default",
  variant: "default"
});
var ToggleGroup = React10.forwardRef((_a, ref) => {
  var _b = _a, { className, variant, size, children } = _b, props = __objRest(_b, ["className", "variant", "size", "children"]);
  return /* @__PURE__ */ jsx20(
    ToggleGroupPrimitive.Root,
    __spreadProps(__spreadValues({
      ref,
      className: cn("robin-flex robin-items-center robin-justify-center robin-gap-1", className)
    }, props), {
      children: /* @__PURE__ */ jsx20(ToggleGroupContext.Provider, { value: { variant, size }, children })
    })
  );
});
ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;
var ToggleGroupItem = React10.forwardRef((_a, ref) => {
  var _b = _a, { className, children, variant, size } = _b, props = __objRest(_b, ["className", "children", "variant", "size"]);
  const context = React10.useContext(ToggleGroupContext);
  return /* @__PURE__ */ jsx20(
    ToggleGroupPrimitive.Item,
    __spreadProps(__spreadValues({
      ref,
      className: cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size
        }),
        className
      )
    }, props), {
      children
    })
  );
});
ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

// src/components/visual-editor/typography/text-alignment.tsx
import { jsx as jsx21, jsxs as jsxs11 } from "react/jsx-runtime";
function TextAlignment() {
  const textAlign = useStyleManagerContext((state) => state.current.textAlign);
  const setTextAlign = useStyleManagerContext((state) => state.setTextAlign);
  return /* @__PURE__ */ jsxs11(
    ToggleGroup,
    {
      className: "!robin-justify-start",
      onValueChange: setTextAlign,
      type: "single",
      value: textAlign,
      children: [
        /* @__PURE__ */ jsx21(ToggleGroupItem, { value: "start", children: /* @__PURE__ */ jsx21(AlignLeft, { className: "robin-w-4 robin-h-4" }) }),
        /* @__PURE__ */ jsx21(ToggleGroupItem, { value: "center", children: /* @__PURE__ */ jsx21(AlignCenter, { className: "robin-w-4 robin-h-4" }) }),
        /* @__PURE__ */ jsx21(ToggleGroupItem, { value: "end", children: /* @__PURE__ */ jsx21(AlignRight, { className: "robin-w-4 robin-h-4" }) })
      ]
    }
  );
}
function VerticalAlignment() {
  const verticalAlign = useStyleManagerContext(
    (state) => state.current.verticalAlign
  );
  const setVerticalAlign = useStyleManagerContext(
    (state) => state.setVerticalAlign
  );
  return /* @__PURE__ */ jsxs11(
    ToggleGroup,
    {
      className: "!robin-justify-start",
      onValueChange: setVerticalAlign,
      type: "single",
      value: verticalAlign,
      children: [
        /* @__PURE__ */ jsx21(ToggleGroupItem, { value: "top", children: /* @__PURE__ */ jsx21(AlignVerticalJustifyStart, { className: "robin-w-4 robin-h-4" }) }),
        /* @__PURE__ */ jsx21(ToggleGroupItem, { value: "middle", children: /* @__PURE__ */ jsx21(AlignVerticalJustifyCenter, { className: "robin-w-4 robin-h-4" }) }),
        /* @__PURE__ */ jsx21(ToggleGroupItem, { value: "bottom", children: /* @__PURE__ */ jsx21(AlignVerticalJustifyEnd, { className: "robin-w-4 robin-h-4" }) })
      ]
    }
  );
}

// src/components/visual-editor/typography/typography-controls.tsx
import { Fragment as Fragment2, jsx as jsx22, jsxs as jsxs12 } from "react/jsx-runtime";
function TypographyControls() {
  return /* @__PURE__ */ jsxs12("div", { className: "robin-flex robin-flex-col robin-gap-4", children: [
    /* @__PURE__ */ jsx22(TextContent, {}),
    /* @__PURE__ */ jsxs12("div", { className: "robin-grid robin-gap-4 robin-typography-grid", children: [
      /* @__PURE__ */ jsx22(FontWeight, {}),
      /* @__PURE__ */ jsx22(FontSize, {})
    ] }),
    /* @__PURE__ */ jsx22("div", { children: /* @__PURE__ */ jsx22(FontColor, {}) }),
    /* @__PURE__ */ jsxs12("div", { className: "robin-grid robin-gap-4 robin-typography-grid", children: [
      /* @__PURE__ */ jsx22(LineHeight, {}),
      /* @__PURE__ */ jsx22(LetterSpacing, {})
    ] }),
    /* @__PURE__ */ jsxs12("div", { children: [
      /* @__PURE__ */ jsx22("div", { className: "robin-text-xs robin-text-gray-500 robin-mb-1", children: "Alignment" }),
      /* @__PURE__ */ jsxs12("div", { className: "robin-grid robin-grid-cols-2 robin-gap-4", children: [
        /* @__PURE__ */ jsx22(TextAlignment, {}),
        /* @__PURE__ */ jsx22(VerticalAlignment, {})
      ] })
    ] })
  ] });
}
function FontColor() {
  const color = useStyleManagerContext((state) => state.current.color);
  const setColor = useStyleManagerContext((state) => state.setColor);
  return /* @__PURE__ */ jsxs12(Fragment2, { children: [
    /* @__PURE__ */ jsx22("div", { className: "robin-text-xs robin-text-gray-500 robin-mb-1", children: "Color" }),
    /* @__PURE__ */ jsx22(ColorInput, { onChange: setColor, value: color })
  ] });
}

// src/components/ui/breadcrumb.tsx
import * as React11 from "react";
import { Slot as Slot2 } from "@radix-ui/react-slot";
import { ChevronRightIcon, DotsHorizontalIcon } from "@radix-ui/react-icons";
import { jsx as jsx23, jsxs as jsxs13 } from "react/jsx-runtime";
var Breadcrumb = React11.forwardRef((_a, ref) => {
  var props = __objRest(_a, []);
  return /* @__PURE__ */ jsx23("nav", __spreadValues({ ref, "aria-label": "breadcrumb" }, props));
});
Breadcrumb.displayName = "Breadcrumb";
var BreadcrumbList = React11.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx23(
    "ol",
    __spreadValues({
      ref,
      className: cn(
        "robin-flex robin-flex-wrap robin-items-center robin-gap-1.5 robin-break-words robin-text-sm robin-text-muted-foreground sm:robin-gap-2.5",
        className
      )
    }, props)
  );
});
BreadcrumbList.displayName = "BreadcrumbList";
var BreadcrumbItem = React11.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx23(
    "li",
    __spreadValues({
      ref,
      className: cn("robin-inline-flex robin-items-center robin-gap-1.5", className)
    }, props)
  );
});
BreadcrumbItem.displayName = "BreadcrumbItem";
var BreadcrumbLink = React11.forwardRef((_a, ref) => {
  var _b = _a, { asChild, className } = _b, props = __objRest(_b, ["asChild", "className"]);
  const Comp = asChild ? Slot2 : "a";
  return /* @__PURE__ */ jsx23(
    Comp,
    __spreadValues({
      ref,
      className: cn("robin-transition-colors hover:robin-text-foreground", className)
    }, props)
  );
});
BreadcrumbLink.displayName = "BreadcrumbLink";
var BreadcrumbPage = React11.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx23(
    "span",
    __spreadValues({
      ref,
      role: "link",
      "aria-disabled": "true",
      "aria-current": "page",
      className: cn("robin-font-normal robin-text-foreground", className)
    }, props)
  );
});
BreadcrumbPage.displayName = "BreadcrumbPage";
var BreadcrumbSeparator = (_a) => {
  var _b = _a, {
    children,
    className
  } = _b, props = __objRest(_b, [
    "children",
    "className"
  ]);
  return /* @__PURE__ */ jsx23(
    "li",
    __spreadProps(__spreadValues({
      role: "presentation",
      "aria-hidden": "true",
      className: cn("[&>svg]:robin-w-3.5 [&>svg]:robin-h-3.5", className)
    }, props), {
      children: children != null ? children : /* @__PURE__ */ jsx23(ChevronRightIcon, {})
    })
  );
};
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";
var BreadcrumbEllipsis = (_a) => {
  var _b = _a, {
    className
  } = _b, props = __objRest(_b, [
    "className"
  ]);
  return /* @__PURE__ */ jsxs13(
    "span",
    __spreadProps(__spreadValues({
      role: "presentation",
      "aria-hidden": "true",
      className: cn("robin-flex robin-h-9 robin-w-9 robin-items-center robin-justify-center", className)
    }, props), {
      children: [
        /* @__PURE__ */ jsx23(DotsHorizontalIcon, { className: "robin-h-4 robin-w-4" }),
        /* @__PURE__ */ jsx23("span", { className: "robin-sr-only", children: "More" })
      ]
    })
  );
};
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";

// src/components/ui/dropdown-menu.tsx
import * as React12 from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { CheckIcon as CheckIcon2, ChevronRightIcon as ChevronRightIcon2, DotFilledIcon } from "@radix-ui/react-icons";
import { jsx as jsx24, jsxs as jsxs14 } from "react/jsx-runtime";
var DropdownMenu = DropdownMenuPrimitive.Root;
var DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;
var DropdownMenuSubTrigger = React12.forwardRef((_a, ref) => {
  var _b = _a, { className, inset, children } = _b, props = __objRest(_b, ["className", "inset", "children"]);
  return /* @__PURE__ */ jsxs14(
    DropdownMenuPrimitive.SubTrigger,
    __spreadProps(__spreadValues({
      ref,
      className: cn(
        "robin-flex robin-cursor-default robin-select-none robin-items-center robin-gap-2 robin-rounded-sm robin-px-2 robin-py-1.5 robin-text-sm robin-outline-none focus:robin-bg-accent data-[state=open]:robin-bg-accent [&_svg]:robin-pointer-events-none [&_svg]:robin-size-4 [&_svg]:robin-shrink-0",
        inset && "robin-pl-8",
        className
      )
    }, props), {
      children: [
        children,
        /* @__PURE__ */ jsx24(ChevronRightIcon2, { className: "robin-ml-auto" })
      ]
    })
  );
});
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;
var DropdownMenuSubContent = React12.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx24(
    DropdownMenuPrimitive.SubContent,
    __spreadValues({
      ref,
      className: cn(
        "robin-z-50 robin-min-w-[8rem] robin-overflow-hidden robin-rounded-md robin-border robin-bg-popover robin-p-1 robin-text-popover-foreground robin-shadow-lg data-[state=open]:robin-animate-in data-[state=closed]:robin-animate-out data-[state=closed]:robin-fade-out-0 data-[state=open]:robin-fade-in-0 data-[state=closed]:robin-zoom-out-95 data-[state=open]:robin-zoom-in-95 data-[side=bottom]:robin-slide-in-from-top-2 data-[side=left]:robin-slide-in-from-right-2 data-[side=right]:robin-slide-in-from-left-2 data-[side=top]:robin-slide-in-from-bottom-2 robin-origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )
    }, props)
  );
});
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;
var DropdownMenuContent = React12.forwardRef((_a, ref) => {
  var _b = _a, { className, sideOffset = 4 } = _b, props = __objRest(_b, ["className", "sideOffset"]);
  return /* @__PURE__ */ jsx24(DropdownMenuPrimitive.Portal, { children: /* @__PURE__ */ jsx24("div", { className: "robin-root", children: /* @__PURE__ */ jsx24(
    DropdownMenuPrimitive.Content,
    __spreadValues({
      ref,
      sideOffset,
      className: cn(
        "robin-z-50 robin-max-h-[var(--radix-dropdown-menu-content-available-height)] robin-min-w-[8rem] robin-overflow-y-auto robin-overflow-x-hidden robin-rounded-md robin-border robin-bg-popover robin-p-1 robin-text-popover-foreground robin-shadow-md",
        "data-[state=open]:robin-animate-in data-[state=closed]:robin-animate-out data-[state=closed]:robin-fade-out-0 data-[state=open]:robin-fade-in-0 data-[state=closed]:robin-zoom-out-95 data-[state=open]:robin-zoom-in-95 data-[side=bottom]:robin-slide-in-from-top-2 data-[side=left]:robin-slide-in-from-right-2 data-[side=right]:robin-slide-in-from-left-2 data-[side=top]:robin-slide-in-from-bottom-2 robin-origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )
    }, props)
  ) }) });
});
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;
var DropdownMenuItem = React12.forwardRef((_a, ref) => {
  var _b = _a, { className, inset } = _b, props = __objRest(_b, ["className", "inset"]);
  return /* @__PURE__ */ jsx24(
    DropdownMenuPrimitive.Item,
    __spreadValues({
      ref,
      className: cn(
        "robin-relative robin-flex robin-cursor-default robin-select-none robin-items-center robin-gap-2 robin-rounded-sm robin-px-2 robin-py-1.5 robin-text-sm robin-outline-none robin-transition-colors focus:robin-bg-accent focus:robin-text-accent-foreground data-[disabled]:robin-pointer-events-none data-[disabled]:robin-opacity-50 [&>svg]:robin-size-4 [&>svg]:robin-shrink-0",
        inset && "robin-pl-8",
        className
      )
    }, props)
  );
});
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;
var DropdownMenuCheckboxItem = React12.forwardRef((_a, ref) => {
  var _b = _a, { className, children, checked } = _b, props = __objRest(_b, ["className", "children", "checked"]);
  return /* @__PURE__ */ jsxs14(
    DropdownMenuPrimitive.CheckboxItem,
    __spreadProps(__spreadValues({
      ref,
      className: cn(
        "robin-relative robin-flex robin-cursor-default robin-select-none robin-items-center robin-rounded-sm robin-py-1.5 robin-pl-8 robin-pr-2 robin-text-sm robin-outline-none robin-transition-colors focus:robin-bg-accent focus:robin-text-accent-foreground data-[disabled]:robin-pointer-events-none data-[disabled]:robin-opacity-50",
        className
      ),
      checked
    }, props), {
      children: [
        /* @__PURE__ */ jsx24("span", { className: "robin-absolute robin-left-2 robin-flex robin-h-3.5 robin-w-3.5 robin-items-center robin-justify-center", children: /* @__PURE__ */ jsx24(DropdownMenuPrimitive.ItemIndicator, { children: /* @__PURE__ */ jsx24(CheckIcon2, { className: "robin-h-4 robin-w-4" }) }) }),
        children
      ]
    })
  );
});
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;
var DropdownMenuRadioItem = React12.forwardRef((_a, ref) => {
  var _b = _a, { className, children } = _b, props = __objRest(_b, ["className", "children"]);
  return /* @__PURE__ */ jsxs14(
    DropdownMenuPrimitive.RadioItem,
    __spreadProps(__spreadValues({
      ref,
      className: cn(
        "robin-relative robin-flex robin-cursor-default robin-select-none robin-items-center robin-rounded-sm robin-py-1.5 robin-pl-8 robin-pr-2 robin-text-sm robin-outline-none robin-transition-colors focus:robin-bg-accent focus:robin-text-accent-foreground data-[disabled]:robin-pointer-events-none data-[disabled]:robin-opacity-50",
        className
      )
    }, props), {
      children: [
        /* @__PURE__ */ jsx24("span", { className: "robin-absolute robin-left-2 robin-flex robin-h-3.5 robin-w-3.5 robin-items-center robin-justify-center", children: /* @__PURE__ */ jsx24(DropdownMenuPrimitive.ItemIndicator, { children: /* @__PURE__ */ jsx24(DotFilledIcon, { className: "robin-h-2 robin-w-2 robin-fill-current" }) }) }),
        children
      ]
    })
  );
});
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;
var DropdownMenuLabel = React12.forwardRef((_a, ref) => {
  var _b = _a, { className, inset } = _b, props = __objRest(_b, ["className", "inset"]);
  return /* @__PURE__ */ jsx24(
    DropdownMenuPrimitive.Label,
    __spreadValues({
      ref,
      className: cn(
        "robin-px-2 robin-py-1.5 robin-text-sm robin-font-semibold",
        inset && "robin-pl-8",
        className
      )
    }, props)
  );
});
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;
var DropdownMenuSeparator = React12.forwardRef((_a, ref) => {
  var _b = _a, { className } = _b, props = __objRest(_b, ["className"]);
  return /* @__PURE__ */ jsx24(
    DropdownMenuPrimitive.Separator,
    __spreadValues({
      ref,
      className: cn("robin--mx-1 robin-my-1 robin-h-px robin-bg-muted", className)
    }, props)
  );
});
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;
var DropdownMenuShortcut = (_a) => {
  var _b = _a, {
    className
  } = _b, props = __objRest(_b, [
    "className"
  ]);
  return /* @__PURE__ */ jsx24(
    "span",
    __spreadValues({
      className: cn("robin-ml-auto robin-text-xs robin-tracking-widest robin-opacity-60", className)
    }, props)
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

// src/components/visual-editor/element-breadcrumb.tsx
import { jsx as jsx25, jsxs as jsxs15 } from "react/jsx-runtime";
function getElementDisplayName(element) {
  const tag = element.tagName.toLowerCase();
  const id = element.id ? `#${element.id}` : "";
  return `${tag}${id}`;
}
function getBreadcrumbElements(element) {
  const elements = [];
  let current = element;
  while (current && current.tagName !== "BODY") {
    elements.unshift(current);
    current = current.parentElement;
  }
  return elements;
}
function ElementBreadcrumb({
  element,
  onElementSelect
}) {
  const breadcrumbElements = getBreadcrumbElements(element);
  const parentElements = breadcrumbElements.slice(0, -1);
  return /* @__PURE__ */ jsxs15("div", { className: "robin-flex robin-items-center robin-gap-2 robin-bg-gray-50 robin-p-2 robin-rounded-md", children: [
    parentElements.length > 0 && /* @__PURE__ */ jsxs15(DropdownMenu, { children: [
      /* @__PURE__ */ jsx25(DropdownMenuTrigger, { className: "robin-focus:outline-none", children: /* @__PURE__ */ jsx25(BreadcrumbEllipsis, {}) }),
      /* @__PURE__ */ jsx25(
        DropdownMenuContent,
        {
          align: "start",
          className: "robin-root robin-max-h-[300px] robin-overflow-y-auto",
          children: parentElements.map((el, index) => /* @__PURE__ */ jsx25(DropdownMenuItem, { onClick: () => onElementSelect(el), children: getElementDisplayName(el) }, index))
        }
      )
    ] }),
    /* @__PURE__ */ jsx25("div", { className: "robin-font-medium robin-text-sm", children: getElementDisplayName(element) })
  ] });
}

// src/components/visual-editor/comment-input.tsx
import { jsx as jsx26 } from "react/jsx-runtime";
function CommentInput() {
  const comment = useStyleManagerContext((state) => state.comment);
  const setComment = useStyleManagerContext((state) => state.setComment);
  return /* @__PURE__ */ jsx26(
    Textarea,
    {
      onChange: (e) => {
        const target = e.target;
        setComment(target.value);
      },
      onInput: (e) => {
        const target = e.target;
        target.style.height = "0px";
        target.style.height = `${target.scrollHeight}px`;
      },
      placeholder: "Ask for changes in natural language...",
      value: comment
    }
  );
}

// src/components/visual-editor/box-model/box-model-controls.tsx
import { useState as useState3 } from "react";

// src/components/visual-editor/box-model/box-model-input.tsx
import { LockIcon, UnlockIcon } from "lucide-react";
import { jsx as jsx27, jsxs as jsxs16 } from "react/jsx-runtime";
function BoxModelInput(props) {
  const align = props.align || "horizontal";
  const handleInputKeyDown = (e) => {
    if (e.key === "Enter") {
      props.onBlur();
    } else if (e.key === "Escape") {
      e.preventDefault();
      e.stopPropagation();
      props.onBlur();
    }
  };
  return /* @__PURE__ */ jsxs16(
    "span",
    {
      className: cn(
        "robin-flex robin-items-center robin-justify-center",
        align === "vertical" && "robin-flex-col robin-pt-1",
        align === "horizontal" && "robin-flex-row robin-pl-1"
      ),
      children: [
        props.isLocked ? /* @__PURE__ */ jsx27(
          LockIcon,
          {
            className: "robin-cursor-pointer",
            onClick: () => {
              props.setLocked(!props.isLocked);
            },
            size: 10
          }
        ) : /* @__PURE__ */ jsx27(
          UnlockIcon,
          {
            className: "robin-cursor-pointer",
            onClick: () => {
              props.setLocked(!props.isLocked);
            },
            size: 10
          }
        ),
        props.isActive ? /* @__PURE__ */ jsx27(
          "input",
          {
            autoFocus: true,
            className: "robin-h-4 robin-w-4 robin-text-[11px] robin-border-0 robin-text-center focus:robin-outline-none focus:robin-ring-1 focus:robin-ring-black/20 [&::-webkit-outer-spin-button]:robin-appearance-none [&::-webkit-inner-spin-button]:robin-appearance-none robin-bg-white robin-text-[#333] [appearance:textfield]",
            min: "0",
            onBlur: props.onBlur,
            onChange: (e) => {
              const val = parseFloat(e.target.value);
              if (isNaN(val)) {
                props.onValueChange(0);
              } else {
                props.onValueChange(parseFloat(val.toString()));
              }
            },
            onKeyDown: handleInputKeyDown,
            step: "1",
            type: "number",
            value: props.value
          }
        ) : /* @__PURE__ */ jsx27(
          "button",
          {
            className: "robin-h-4 robin-text-[11px] robin-text-center hover:robin-bg-black/5 robin-w-4",
            onClick: props.onFocus,
            type: "button",
            children: props.value
          }
        )
      ]
    }
  );
}

// src/components/visual-editor/box-model/box-model-controls.tsx
import { jsx as jsx28, jsxs as jsxs17 } from "react/jsx-runtime";
function BoxModelControls() {
  const [activeBoxModel, setActiveBoxModel] = useState3(null);
  const [activeInput, setActiveInput] = useState3(null);
  const marginInPx = useStyleManagerContext(
    (state) => state.current.marginInPx
  );
  const [marginLocked, setMarginLocked] = useState3(
    marginInPx.top === marginInPx.bottom && marginInPx.top === marginInPx.left && marginInPx.top === marginInPx.right
  );
  const setMargin = useStyleManagerContext((state) => state.setMargin);
  const paddingInPx = useStyleManagerContext(
    (state) => state.current.paddingInPx
  );
  const [paddingLocked, setPaddingLocked] = useState3(
    paddingInPx.top === paddingInPx.bottom && paddingInPx.top === paddingInPx.left && paddingInPx.top === paddingInPx.right
  );
  const setPadding = useStyleManagerContext((state) => state.setPadding);
  const borderInPx = useStyleManagerContext(
    (state) => state.current.borderInPx
  );
  const [borderLocked, setBorderLocked] = useState3(
    borderInPx.top === borderInPx.bottom && borderInPx.top === borderInPx.left && borderInPx.top === borderInPx.right
  );
  const setBorder = useStyleManagerContext((state) => state.setBorder);
  return /* @__PURE__ */ jsx28("div", { className: "robin-font-mono", children: /* @__PURE__ */ jsxs17("div", { className: "robin-relative robin-bg-[#fffbe6] robin-px-8 robin-py-10 robin-border robin-border-dashed robin-border-[#e6c000]/50", children: [
    /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-top-1 robin-left-1 robin-text-[10px] robin-text-[#333]", children: "margin" }),
    /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-top-1 robin-left-1/2 robin--translate-x-1/2", children: /* @__PURE__ */ jsx28(
      BoxModelInput,
      {
        isActive: activeBoxModel === "margin" && activeInput === "top",
        isLocked: marginLocked,
        onBlur: () => {
          setActiveBoxModel(null);
          setActiveInput(null);
        },
        onFocus: () => {
          setActiveBoxModel("margin");
          setActiveInput("top");
        },
        onValueChange: (value) => {
          setMargin(value, "top", marginLocked);
        },
        setLocked: setMarginLocked,
        value: marginInPx.top
      }
    ) }),
    /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-bottom-1 robin-left-1/2 robin--translate-x-1/2", children: /* @__PURE__ */ jsx28(
      BoxModelInput,
      {
        isActive: activeBoxModel === "margin" && activeInput === "bottom",
        isLocked: marginLocked,
        onBlur: () => {
          setActiveBoxModel(null);
          setActiveInput(null);
        },
        onFocus: () => {
          setActiveBoxModel("margin");
          setActiveInput("bottom");
        },
        onValueChange: (value) => {
          setMargin(value, "bottom", marginLocked);
        },
        setLocked: setMarginLocked,
        value: marginInPx.bottom
      }
    ) }),
    /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-left-2 robin-top-1/2 robin--translate-y-1/2", children: /* @__PURE__ */ jsx28(
      BoxModelInput,
      {
        isActive: activeBoxModel === "margin" && activeInput === "left",
        isLocked: marginLocked,
        onBlur: () => {
          setActiveBoxModel(null);
          setActiveInput(null);
        },
        onFocus: () => {
          setActiveBoxModel("margin");
          setActiveInput("left");
        },
        onValueChange: (value) => {
          setMargin(value, "left", marginLocked);
        },
        setLocked: setMarginLocked,
        value: marginInPx.left,
        align: "vertical"
      }
    ) }),
    /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-right-2 robin-top-1/2 robin--translate-y-1/2", children: /* @__PURE__ */ jsx28(
      BoxModelInput,
      {
        isActive: activeBoxModel === "margin" && activeInput === "right",
        isLocked: marginLocked,
        onBlur: () => {
          setActiveBoxModel(null);
          setActiveInput(null);
        },
        onFocus: () => {
          setActiveBoxModel("margin");
          setActiveInput("right");
        },
        onValueChange: (value) => {
          setMargin(value, "right", marginLocked);
        },
        setLocked: setMarginLocked,
        value: marginInPx.right,
        align: "vertical"
      }
    ) }),
    /* @__PURE__ */ jsxs17("div", { className: "robin-relative robin-mx-4", children: [
      /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin--top-1 robin-left-0 robin-z-10", children: /* @__PURE__ */ jsx28("span", { className: "robin-text-[11px] robin-text-white robin-bg-[#888] robin-px-1", children: "border" }) }),
      /* @__PURE__ */ jsx28("div", { className: "robin-relative robin-h-1 robin-bg-[#888] robin-flex robin-items-center robin-justify-center", children: /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-top-1/2 robin--translate-y-1/2 robin-z-10 robin-bg-[#888] robin-text-white", children: /* @__PURE__ */ jsx28(
        BoxModelInput,
        {
          isActive: activeBoxModel === "border" && activeInput === "top",
          isLocked: borderLocked,
          onBlur: () => {
            setActiveBoxModel(null);
            setActiveInput(null);
          },
          onFocus: () => {
            setActiveBoxModel("border");
            setActiveInput("top");
          },
          onValueChange: (value) => {
            setBorder(value, "top", borderLocked);
          },
          setLocked: setBorderLocked,
          value: borderInPx.top
        }
      ) }) }),
      /* @__PURE__ */ jsxs17("div", { className: "robin-flex", children: [
        /* @__PURE__ */ jsx28("div", { className: "robin-relative robin-w-1 robin-bg-[#888]", children: /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-top-1/2 robin--translate-y-1/2 robin-left-1/2 robin--translate-x-1/2 robin-z-10 robin-bg-[#888] robin-text-white", children: /* @__PURE__ */ jsx28(
          BoxModelInput,
          {
            isActive: activeBoxModel === "border" && activeInput === "left",
            isLocked: borderLocked,
            onBlur: () => {
              setActiveBoxModel(null);
              setActiveInput(null);
            },
            onFocus: () => {
              setActiveBoxModel("border");
              setActiveInput("left");
            },
            onValueChange: (value) => {
              setBorder(value, "left", borderLocked);
            },
            setLocked: setBorderLocked,
            value: borderInPx.left,
            align: "vertical"
          }
        ) }) }),
        /* @__PURE__ */ jsxs17("div", { className: "robin-relative robin-flex-1 robin-bg-[#f3f0ff] robin-p-12", children: [
          /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-top-6 robin-left-6 robin-text-[11px] robin-text-[#333]", children: "padding" }),
          /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-top-6 robin-left-1/2 robin--translate-x-1/2", children: /* @__PURE__ */ jsx28(
            BoxModelInput,
            {
              isActive: activeBoxModel === "padding" && activeInput === "top",
              isLocked: paddingLocked,
              onBlur: () => {
                setActiveBoxModel(null);
                setActiveInput(null);
              },
              onFocus: () => {
                setActiveBoxModel("padding");
                setActiveInput("top");
              },
              onValueChange: (value) => {
                setPadding(value, "top", paddingLocked);
              },
              setLocked: setPaddingLocked,
              value: paddingInPx.top
            }
          ) }),
          /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-bottom-6 robin-left-1/2 robin--translate-x-1/2", children: /* @__PURE__ */ jsx28(
            BoxModelInput,
            {
              isActive: activeBoxModel === "padding" && activeInput === "bottom",
              isLocked: paddingLocked,
              onBlur: () => {
                setActiveBoxModel(null);
                setActiveInput(null);
              },
              onFocus: () => {
                setActiveBoxModel("padding");
                setActiveInput("bottom");
              },
              onValueChange: (value) => {
                setPadding(value, "bottom", paddingLocked);
              },
              setLocked: setPaddingLocked,
              value: paddingInPx.bottom
            }
          ) }),
          /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-left-6 robin-top-1/2 robin--translate-y-1/2", children: /* @__PURE__ */ jsx28(
            BoxModelInput,
            {
              isActive: activeBoxModel === "padding" && activeInput === "left",
              isLocked: paddingLocked,
              onBlur: () => {
                setActiveBoxModel(null);
                setActiveInput(null);
              },
              onFocus: () => {
                setActiveBoxModel("padding");
                setActiveInput("left");
              },
              onValueChange: (value) => {
                setPadding(value, "left", paddingLocked);
              },
              setLocked: setPaddingLocked,
              value: paddingInPx.left,
              align: "vertical"
            }
          ) }),
          /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-right-6 robin-top-1/2 robin--translate-y-1/2", children: /* @__PURE__ */ jsx28(
            BoxModelInput,
            {
              isActive: activeBoxModel === "padding" && activeInput === "right",
              isLocked: paddingLocked,
              onBlur: () => {
                setActiveBoxModel(null);
                setActiveInput(null);
              },
              onFocus: () => {
                setActiveBoxModel("padding");
                setActiveInput("right");
              },
              onValueChange: (value) => {
                setPadding(value, "right", paddingLocked);
              },
              setLocked: setPaddingLocked,
              value: paddingInPx.right,
              align: "vertical"
            }
          ) }),
          /* @__PURE__ */ jsx28("div", { className: "robin-bg-[#e8f2ff] robin-p-4 robin-border robin-border-dashed robin-border-[#99c2ff]/50 robin-text-[11px] robin-text-[#333] robin-text-center" })
        ] }),
        /* @__PURE__ */ jsx28("div", { className: "robin-relative robin-w-1 robin-bg-[#888]", children: /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-top-1/2 robin--translate-y-1/2 robin-left-1/2 robin--translate-x-1/2 robin-z-10 robin-bg-[#888] robin-text-white", children: /* @__PURE__ */ jsx28(
          BoxModelInput,
          {
            isActive: activeBoxModel === "border" && activeInput === "right",
            isLocked: borderLocked,
            onBlur: () => {
              setActiveBoxModel(null);
              setActiveInput(null);
            },
            onFocus: () => {
              setActiveBoxModel("border");
              setActiveInput("right");
            },
            onValueChange: (value) => {
              setBorder(value, "right", borderLocked);
            },
            setLocked: setBorderLocked,
            value: borderInPx.right,
            align: "vertical"
          }
        ) }) })
      ] }),
      /* @__PURE__ */ jsx28("div", { className: "robin-relative robin-h-1 robin-bg-[#888] robin-flex robin-items-center robin-justify-center", children: /* @__PURE__ */ jsx28("div", { className: "robin-absolute robin-top-1/2 robin--translate-y-1/2 robin-z-10 robin-bg-[#888] robin-text-white", children: /* @__PURE__ */ jsx28(
        BoxModelInput,
        {
          isActive: activeBoxModel === "border" && activeInput === "bottom",
          isLocked: borderLocked,
          onBlur: () => {
            setActiveBoxModel(null);
            setActiveInput(null);
          },
          onFocus: () => {
            setActiveBoxModel("border");
            setActiveInput("bottom");
          },
          onValueChange: (value) => {
            setBorder(value, "bottom", borderLocked);
          },
          setLocked: setBorderLocked,
          value: borderInPx.bottom
        }
      ) }) })
    ] })
  ] }) });
}

// src/components/visual-editor/editor-panel.tsx
import { jsx as jsx29, jsxs as jsxs18 } from "react/jsx-runtime";
function EditorPanel({ element }) {
  return /* @__PURE__ */ jsxs18("div", { className: "robin-space-y-4", children: [
    /* @__PURE__ */ jsx29(ElementBreadcrumb, { element, onElementSelect: () => {
    } }),
    /* @__PURE__ */ jsx29(ScrollArea, { className: "robin-h-[30vh] robin-w-full", children: /* @__PURE__ */ jsxs18("div", { className: "robin-grid robin-editor-panel-grid robin-gap-4 robin-pr-4 robin-pl-1", children: [
      /* @__PURE__ */ jsxs18("section", { className: "robin-comment-input-container", children: [
        /* @__PURE__ */ jsx29("h3", { className: "robin-text-sm robin-font-semibold robin-text-gray-900 robin-mb-4 robin-pb-2 robin-border-b", children: "Comments" }),
        /* @__PURE__ */ jsx29(CommentInput, {})
      ] }),
      hasDirectTextContent(element) && /* @__PURE__ */ jsxs18("section", { className: "robin-typography-container", children: [
        /* @__PURE__ */ jsx29("h3", { className: "robin-text-sm robin-font-semibold robin-text-gray-900 robin-mb-4 robin-pb-2 robin-border-b", children: "Typography" }),
        /* @__PURE__ */ jsx29(TypographyControls, {})
      ] }),
      /* @__PURE__ */ jsxs18("section", { children: [
        /* @__PURE__ */ jsx29("h3", { className: "robin-text-sm robin-font-semibold robin-text-gray-900 robin-mb-4 robin-pb-2 robin-border-b", children: "Box Model" }),
        /* @__PURE__ */ jsx29(BoxModelControls, {})
      ] })
    ] }) })
  ] });
}

// src/components/element-drawer.tsx
import { useQuery as useQuery3 } from "@tanstack/react-query";
import { snapshot as snapshot2 } from "rrweb-snapshot";
import equal2 from "fast-deep-equal";
import { X } from "lucide-react";
import { jsx as jsx30, jsxs as jsxs19 } from "react/jsx-runtime";
function RobinElementDrawer({
  element,
  isElementSelected,
  onDrawerOpenChange
}) {
  const { data: originalSnap, isLoading: isOriginalSnapLoading } = useQuery3({
    queryKey: ["element-image", element.outerHTML],
    queryFn: () => __async(this, null, function* () {
      element.setAttribute("data-robin-target", "true");
      const snap = snapshot2(document);
      element.removeAttribute("data-robin-target");
      if (!snap) {
        return null;
      }
      return snap;
    })
  });
  const rect = element.getBoundingClientRect();
  const { top, left, height, width } = rect;
  const loadingOriginalSnap = isOriginalSnapLoading || originalSnap === void 0;
  useEffect2(() => {
    const scrollElementToTop = () => {
      if (isElementSelected) {
        const elementTop = element.getBoundingClientRect().top;
        const currentScroll = window.scrollY;
        window.scrollTo({
          top: currentScroll + elementTop,
          behavior: "smooth"
        });
      }
    };
    if (!loadingOriginalSnap) {
      scrollElementToTop();
    }
  }, [isElementSelected, element, loadingOriginalSnap]);
  if (loadingOriginalSnap) {
    return null;
  }
  return /* @__PURE__ */ jsxs19(
    Drawer,
    {
      modal: false,
      onOpenChange: onDrawerOpenChange,
      open: isElementSelected,
      shouldScaleBackground: false,
      children: [
        /* @__PURE__ */ jsx30(
          DrawerTrigger,
          {
            className: "robin-absolute robin-pointer-events-none robin-ring-2 robin-ring-offset-2",
            style: {
              top: `${top + window.scrollY}px`,
              left: `${left + window.scrollX}px`,
              height: `${height}px`,
              width: `${width}px`
            }
          }
        ),
        /* @__PURE__ */ jsxs19(DrawerContent, { children: [
          /* @__PURE__ */ jsx30(DrawerClose, { className: "robin-absolute robin-top-4 robin-right-4", children: /* @__PURE__ */ jsx30(X, { className: "robin-h-4 robin-w-4" }) }),
          /* @__PURE__ */ jsxs19(DrawerHeader, { children: [
            /* @__PURE__ */ jsx30(DrawerTitle, { className: "robin-sr-only", children: "Element Changes" }),
            /* @__PURE__ */ jsx30(DrawerDescription, { className: "robin-sr-only", children: "Make changes to the selected element." })
          ] }),
          /* @__PURE__ */ jsxs19(StyleManagerProvider, { element, originalSnap, children: [
            /* @__PURE__ */ jsx30("div", { className: "robin-editor-panel-container", children: /* @__PURE__ */ jsx30("div", { className: "robin-px-4", children: /* @__PURE__ */ jsx30(EditorPanel, { element }) }) }),
            /* @__PURE__ */ jsx30(DrawerFooter, { children: /* @__PURE__ */ jsx30(
              EditorFooter,
              {
                onDone: () => {
                  onDrawerOpenChange(false);
                },
                originalSnap
              }
            ) })
          ] })
        ] })
      ]
    }
  );
}
function EditorFooter({
  onDone,
  originalSnap
}) {
  const resetStyles = useStyleManagerContext((state) => state.resetStyles);
  const element = useStyleManagerContext((state) => state.element);
  const comment = useStyleManagerContext((state) => state.comment);
  const currentStyles = useStyleManagerContext((state) => state.current);
  const originalStyles = useStyleManagerContext((state) => state.original);
  const createElementFeedback = useCreateElementFeedback();
  const hasChanges = !!comment || !equal2(currentStyles, originalStyles);
  const submit = () => __async(this, null, function* () {
    onDone();
    yield createElementFeedback.mutateAsync({
      comment,
      element,
      currentStyles,
      originalStyles,
      originalSnap
    });
  });
  return /* @__PURE__ */ jsxs19("div", { className: "robin-flex robin-justify-end robin-gap-2", children: [
    /* @__PURE__ */ jsx30(Button, { variant: "secondary", onClick: resetStyles, type: "button", children: "Reset" }),
    /* @__PURE__ */ jsx30(
      Button,
      {
        disabled: createElementFeedback.isPending || !hasChanges,
        onClick: submit,
        type: "button",
        children: createElementFeedback.isPending ? "Applying..." : "Apply Changes"
      }
    )
  ] });
}

// src/robin.tsx
import { Fragment as Fragment3, jsx as jsx31, jsxs as jsxs20 } from "react/jsx-runtime";
var queryClient = new QueryClient();
function Robin({
  apiKey,
  robinURL = "https://www.realrobin.dev",
  extraHeaders = {}
}) {
  const [isPageDrawerOpen, setIsPageDrawerOpen] = useState4(false);
  const [hoveredElement, setHoveredElement] = useState4(
    null
  );
  const [isElementSelected, setIsElementSelected] = useState4(false);
  const stopInspecting = () => {
    document.removeEventListener("mousemove", handleHover);
    document.removeEventListener("keydown", handleEscape);
    setHoveredElement(null);
    setIsElementSelected(false);
  };
  const selectElement = (e) => {
    e.preventDefault();
    e.stopPropagation();
    document.removeEventListener("mousemove", handleHover);
    setIsElementSelected(true);
  };
  const handleMouseOut = (event) => {
    const leftElement = event.target;
    if (leftElement instanceof HTMLElement) {
      leftElement.removeEventListener("click", selectElement);
      leftElement.removeEventListener("mouseout", handleMouseOut);
    }
  };
  const handleHover = (event) => {
    event.preventDefault();
    const hovered = event.target;
    if (hovered instanceof HTMLElement) {
      hovered.addEventListener("click", selectElement);
      hovered.addEventListener("mouseout", handleMouseOut);
      setHoveredElement(hovered);
    }
  };
  const handleEscape = (event) => {
    if (event.key === "Escape") {
      stopInspecting();
    }
  };
  const startInspecting = () => {
    document.addEventListener("mousemove", handleHover);
    document.addEventListener("keydown", handleEscape);
  };
  return /* @__PURE__ */ jsx31(QueryClientProvider, { client: queryClient, children: /* @__PURE__ */ jsx31(RobinContext.Provider, { value: { apiKey, robinURL, extraHeaders }, children: /* @__PURE__ */ jsxs20("div", { className: "robin-root", children: [
    /* @__PURE__ */ jsx31(
      RobinPageDrawer,
      {
        isPageDrawerOpen,
        onSelectElementClick: () => {
          setIsPageDrawerOpen(false);
          startInspecting();
        },
        setIsPageDrawerOpen
      }
    ),
    hoveredElement ? /* @__PURE__ */ jsx31(Fragment3, { children: isElementSelected ? /* @__PURE__ */ jsx31(
      RobinElementDrawer,
      {
        element: hoveredElement,
        isElementSelected,
        onDrawerOpenChange: (open) => {
          if (!open) {
            setHoveredElement(null);
            setIsElementSelected(false);
          }
        }
      }
    ) : /* @__PURE__ */ jsx31(
      RobinElementHighlighter,
      {
        element: hoveredElement,
        selectElement: () => setIsElementSelected(true)
      }
    ) }) : null
  ] }) }) });
}
export {
  Robin
};
